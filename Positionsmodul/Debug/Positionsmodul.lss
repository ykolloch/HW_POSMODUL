
Positionsmodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000001f6  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800106  00800106  00000290  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004b3  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001fa  00000000  00000000  000007db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023e  00000000  00000000  000009d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00000c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000224  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000149  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000106d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_20>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 ef       	ldi	r30, 0xF6	; 246
  90:	f1 e0       	ldi	r31, 0x01	; 1
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 30       	cpi	r26, 0x06	; 6
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a6 e0       	ldi	r26, 0x06	; 6
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a7 30       	cpi	r26, 0x07	; 7
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  b2:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <uart_init>:
unsigned char atCom4[] = {"AT+P2PFIND=20000,2\n\r"};
	
volatile char REC;

void uart_init(void) {
	UBRR0H = (BAUDRATE >> 8);
  ba:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUDRATE;
  be:	81 e8       	ldi	r24, 0x81	; 129
  c0:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);
  c4:	e1 ec       	ldi	r30, 0xC1	; 193
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	88 61       	ori	r24, 0x18	; 24
  cc:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | ( 1<< UCSZ00);
  ce:	a2 ec       	ldi	r26, 0xC2	; 194
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	8c 91       	ld	r24, X
  d4:	86 60       	ori	r24, 0x06	; 6
  d6:	8c 93       	st	X, r24
	
	UCSR0B |= (1 << RXCIE0);
  d8:	80 81       	ld	r24, Z
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	80 83       	st	Z, r24
	UCSR0A |= (1 << RXC0);
  de:	e0 ec       	ldi	r30, 0xC0	; 192
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	
	DDRD &= ~_BV(DDD0);
  e8:	50 98       	cbi	0x0a, 0	; 10
	DDRD |= _BV(DDD1);
  ea:	51 9a       	sbi	0x0a, 1	; 10
	
	sei();
  ec:	78 94       	sei
  ee:	08 95       	ret

000000f0 <uart_init2>:
}

void uart_init2(void) {
	UBRR1H = (BAUDRATE >> 8);
  f0:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = BAUDRATE;
  f4:	81 e8       	ldi	r24, 0x81	; 129
  f6:	80 93 cc 00 	sts	0x00CC, r24
	
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);
  fa:	e9 ec       	ldi	r30, 0xC9	; 201
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	88 61       	ori	r24, 0x18	; 24
 102:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | ( 1<< UCSZ10);
 104:	aa ec       	ldi	r26, 0xCA	; 202
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	8c 91       	ld	r24, X
 10a:	86 60       	ori	r24, 0x06	; 6
 10c:	8c 93       	st	X, r24
	
	UCSR1B |= (1 << RXCIE1);
 10e:	80 81       	ld	r24, Z
 110:	80 68       	ori	r24, 0x80	; 128
 112:	80 83       	st	Z, r24
	UCSR1A |= (1 << RXC1);
 114:	e8 ec       	ldi	r30, 0xC8	; 200
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <uart_transmit>:
}

void uart_transmit(unsigned char c) {
	while(!(UCSR0A & (1 << UDRE0)));
 120:	e0 ec       	ldi	r30, 0xC0	; 192
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	95 ff       	sbrs	r25, 5
 128:	fd cf       	rjmp	.-6      	; 0x124 <uart_transmit+0x4>
	UDR0 = c;
 12a:	80 93 c6 00 	sts	0x00C6, r24
 12e:	08 95       	ret

00000130 <uart_transmit2>:
	while(!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

void uart_transmit2(unsigned char c) {
	while(!(UCSR1A & (1 << UDRE1)));
 130:	e8 ec       	ldi	r30, 0xC8	; 200
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	90 81       	ld	r25, Z
 136:	95 ff       	sbrs	r25, 5
 138:	fd cf       	rjmp	.-6      	; 0x134 <uart_transmit2+0x4>
	UDR1 = c;
 13a:	80 93 ce 00 	sts	0x00CE, r24
 13e:	08 95       	ret

00000140 <uart_sendString>:
char uart_read2() {
	while(!(UCSR1A & (1 << RXC1)));
	return UDR1;
}

void uart_sendString(int x, char tmp[]) {
 140:	cf 92       	push	r12
 142:	df 92       	push	r13
 144:	ef 92       	push	r14
 146:	ff 92       	push	r15
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	6c 01       	movw	r12, r24
 152:	7b 01       	movw	r14, r22
 154:	8b 01       	movw	r16, r22
	for(int i=0; i < strlen(tmp); i++) {
 156:	c0 e0       	ldi	r28, 0x00	; 0
 158:	d0 e0       	ldi	r29, 0x00	; 0
 15a:	0f c0       	rjmp	.+30     	; 0x17a <uart_sendString+0x3a>
		if(x == 0){
 15c:	c1 14       	cp	r12, r1
 15e:	d1 04       	cpc	r13, r1
 160:	29 f4       	brne	.+10     	; 0x16c <uart_sendString+0x2c>
			uart_transmit(tmp[i]);
 162:	f8 01       	movw	r30, r16
 164:	80 81       	ld	r24, Z
 166:	0e 94 90 00 	call	0x120	; 0x120 <uart_transmit>
 16a:	04 c0       	rjmp	.+8      	; 0x174 <uart_sendString+0x34>
		} else {
			uart_transmit2(tmp[i]);	
 16c:	f8 01       	movw	r30, r16
 16e:	80 81       	ld	r24, Z
 170:	0e 94 98 00 	call	0x130	; 0x130 <uart_transmit2>
	while(!(UCSR1A & (1 << RXC1)));
	return UDR1;
}

void uart_sendString(int x, char tmp[]) {
	for(int i=0; i < strlen(tmp); i++) {
 174:	21 96       	adiw	r28, 0x01	; 1
 176:	0f 5f       	subi	r16, 0xFF	; 255
 178:	1f 4f       	sbci	r17, 0xFF	; 255
 17a:	f7 01       	movw	r30, r14
 17c:	01 90       	ld	r0, Z+
 17e:	00 20       	and	r0, r0
 180:	e9 f7       	brne	.-6      	; 0x17c <uart_sendString+0x3c>
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	ee 19       	sub	r30, r14
 186:	ff 09       	sbc	r31, r15
 188:	ce 17       	cp	r28, r30
 18a:	df 07       	cpc	r29, r31
 18c:	38 f3       	brcs	.-50     	; 0x15c <uart_sendString+0x1c>
			uart_transmit(tmp[i]);
		} else {
			uart_transmit2(tmp[i]);	
		}
	}
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	df 90       	pop	r13
 19c:	cf 90       	pop	r12
 19e:	08 95       	ret

000001a0 <__vector_20>:
	uart_sendString(0, atCom3);
	_delay_ms(500);
	uart_sendString(0, atCom4);
}

ISR(USART0_RX_vect) {
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
	REC = UDR0;
 1ac:	80 91 c6 00 	lds	r24, 0x00C6
 1b0:	80 93 06 01 	sts	0x0106, r24
	//uart_transmit2(REC);
}
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <main>:

int main(void)
{
	DDRD |= (1 << LED_GREEN);
 1c0:	55 9a       	sbi	0x0a, 5	; 10
	
	uart_init();
 1c2:	0e 94 5d 00 	call	0xba	; 0xba <uart_init>
	uart_init2();
 1c6:	0e 94 78 00 	call	0xf0	; 0xf0 <uart_init2>
	//wifiDirect_connection();
	
    while(1)
    {
		uart_sendString(1, "TEST");
		PORTD ^= (1 << LED_GREEN);
 1ca:	c0 e2       	ldi	r28, 0x20	; 32
	
	//wifiDirect_connection();
	
    while(1)
    {
		uart_sendString(1, "TEST");
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	71 e0       	ldi	r23, 0x01	; 1
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 a0 00 	call	0x140	; 0x140 <uart_sendString>
		PORTD ^= (1 << LED_GREEN);
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	8c 27       	eor	r24, r28
 1dc:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	88 e0       	ldi	r24, 0x08	; 8
 1e2:	9d e3       	ldi	r25, 0x3D	; 61
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0x24>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x2e>
 1ee:	00 00       	nop
 1f0:	ed cf       	rjmp	.-38     	; 0x1cc <main+0xc>

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
