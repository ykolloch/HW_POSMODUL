
Positionsmodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  00000322  000003b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000322  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000079  0080018a  0080018a  00000440  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000528  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e2  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026e  00000000  00000000  00000bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000014c  00000000  00000000  00000e58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000253  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000245  00000000  00000000  000011f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_20>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 e2       	ldi	r30, 0x22	; 34
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	aa 38       	cpi	r26, 0x8A	; 138
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	aa e8       	ldi	r26, 0x8A	; 138
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a3 30       	cpi	r26, 0x03	; 3
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
  b2:	0c 94 8f 01 	jmp	0x31e	; 0x31e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <uart_init>:
volatile char REC;
volatile char recMsg[100];
volatile int msgInt = 0;

void uart_init(void) {
	UBRR0H = (BAUDRATE >> 8);
  ba:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUDRATE;
  be:	81 e8       	ldi	r24, 0x81	; 129
  c0:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);
  c4:	e1 ec       	ldi	r30, 0xC1	; 193
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	88 61       	ori	r24, 0x18	; 24
  cc:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | ( 1<< UCSZ00);
  ce:	a2 ec       	ldi	r26, 0xC2	; 194
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	8c 91       	ld	r24, X
  d4:	86 60       	ori	r24, 0x06	; 6
  d6:	8c 93       	st	X, r24
	
	UCSR0B |= (1 << RXCIE0);
  d8:	80 81       	ld	r24, Z
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	80 83       	st	Z, r24
	UCSR0A |= (1 << RXC0);
  de:	e0 ec       	ldi	r30, 0xC0	; 192
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	
	sei();
  e8:	78 94       	sei
  ea:	08 95       	ret

000000ec <uart_init2>:
}

void uart_init2(void) {
	UBRR1H = (BAUDRATE >> 8);
  ec:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = BAUDRATE;
  f0:	81 e8       	ldi	r24, 0x81	; 129
  f2:	80 93 cc 00 	sts	0x00CC, r24
	
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);
  f6:	e9 ec       	ldi	r30, 0xC9	; 201
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 61       	ori	r24, 0x18	; 24
  fe:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | ( 1<< UCSZ10);
 100:	ea ec       	ldi	r30, 0xCA	; 202
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	86 60       	ori	r24, 0x06	; 6
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret

0000010c <uart_transmit>:
	
}

void uart_transmit(char c) {
	while(!(UCSR0A & (1 << UDRE0)));
 10c:	e0 ec       	ldi	r30, 0xC0	; 192
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	90 81       	ld	r25, Z
 112:	95 ff       	sbrs	r25, 5
 114:	fd cf       	rjmp	.-6      	; 0x110 <uart_transmit+0x4>
	UDR0 = c;
 116:	80 93 c6 00 	sts	0x00C6, r24
 11a:	08 95       	ret

0000011c <uart_transmit2>:
	while(!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

void uart_transmit2(char c) {
	while(!(UCSR1A & (1 << UDRE1)));
 11c:	e8 ec       	ldi	r30, 0xC8	; 200
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	90 81       	ld	r25, Z
 122:	95 ff       	sbrs	r25, 5
 124:	fd cf       	rjmp	.-6      	; 0x120 <uart_transmit2+0x4>
	UDR1 = c;
 126:	80 93 ce 00 	sts	0x00CE, r24
 12a:	08 95       	ret

0000012c <uart_sendString>:
char uart_read2() {
	while(!(UCSR1A & (1 << RXC1)));
	return UDR1;
}

void uart_sendString(char temp[]) {
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	8c 01       	movw	r16, r24
 13a:	7c 01       	movw	r14, r24
	for(int i=0; i < strlen(temp); i++) {
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	d0 e0       	ldi	r29, 0x00	; 0
 140:	06 c0       	rjmp	.+12     	; 0x14e <uart_sendString+0x22>
		uart_transmit(temp[i]);
 142:	f7 01       	movw	r30, r14
 144:	81 91       	ld	r24, Z+
 146:	7f 01       	movw	r14, r30
 148:	0e 94 86 00 	call	0x10c	; 0x10c <uart_transmit>
	while(!(UCSR1A & (1 << RXC1)));
	return UDR1;
}

void uart_sendString(char temp[]) {
	for(int i=0; i < strlen(temp); i++) {
 14c:	21 96       	adiw	r28, 0x01	; 1
 14e:	f8 01       	movw	r30, r16
 150:	01 90       	ld	r0, Z+
 152:	00 20       	and	r0, r0
 154:	e9 f7       	brne	.-6      	; 0x150 <uart_sendString+0x24>
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	e0 1b       	sub	r30, r16
 15a:	f1 0b       	sbc	r31, r17
 15c:	ce 17       	cp	r28, r30
 15e:	df 07       	cpc	r29, r31
 160:	80 f3       	brcs	.-32     	; 0x142 <uart_sendString+0x16>
		uart_transmit(temp[i]);
	}
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	ff 90       	pop	r15
 16c:	ef 90       	pop	r14
 16e:	08 95       	ret

00000170 <uart_sendString2>:

void uart_sendString2(char temp[]) {
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	8c 01       	movw	r16, r24
 17e:	7c 01       	movw	r14, r24
	for(int i=0; i < strlen(temp); i++) {
 180:	c0 e0       	ldi	r28, 0x00	; 0
 182:	d0 e0       	ldi	r29, 0x00	; 0
 184:	06 c0       	rjmp	.+12     	; 0x192 <uart_sendString2+0x22>
		uart_transmit2(temp[i]);
 186:	f7 01       	movw	r30, r14
 188:	81 91       	ld	r24, Z+
 18a:	7f 01       	movw	r14, r30
 18c:	0e 94 8e 00 	call	0x11c	; 0x11c <uart_transmit2>
		uart_transmit(temp[i]);
	}
}

void uart_sendString2(char temp[]) {
	for(int i=0; i < strlen(temp); i++) {
 190:	21 96       	adiw	r28, 0x01	; 1
 192:	f8 01       	movw	r30, r16
 194:	01 90       	ld	r0, Z+
 196:	00 20       	and	r0, r0
 198:	e9 f7       	brne	.-6      	; 0x194 <uart_sendString2+0x24>
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	e0 1b       	sub	r30, r16
 19e:	f1 0b       	sbc	r31, r17
 1a0:	ce 17       	cp	r28, r30
 1a2:	df 07       	cpc	r29, r31
 1a4:	80 f3       	brcs	.-32     	; 0x186 <uart_sendString2+0x16>
		uart_transmit2(temp[i]);
	}
}
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	08 95       	ret

000001b4 <wifiDirect_connection>:

void wifiDirect_connection() {
	PORTD ^= (1 << LED_YELLOW);
 1b4:	9b b1       	in	r25, 0x0b	; 11
 1b6:	80 e4       	ldi	r24, 0x40	; 64
 1b8:	89 27       	eor	r24, r25
 1ba:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	38 e0       	ldi	r19, 0x08	; 8
 1c0:	8d e3       	ldi	r24, 0x3D	; 61
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	30 40       	sbci	r19, 0x00	; 0
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <wifiDirect_connection+0xe>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <wifiDirect_connection+0x18>
 1cc:	00 00       	nop
	_delay_ms(1000);
	uart_sendString(atCom1);
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 96 00 	call	0x12c	; 0x12c <uart_sendString>
 1d6:	94 e5       	ldi	r25, 0x54	; 84
 1d8:	20 ea       	ldi	r18, 0xA0	; 160
 1da:	3c ef       	ldi	r19, 0xFC	; 252
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	91 50       	subi	r25, 0x01	; 1
 1e0:	20 40       	sbci	r18, 0x00	; 0
 1e2:	30 40       	sbci	r19, 0x00	; 0
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	d9 f7       	brne	.-10     	; 0x1de <wifiDirect_connection+0x2a>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <wifiDirect_connection+0x36>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <wifiDirect_connection+0x38>
 1ec:	00 00       	nop
	_delay_ms(10000);
	uart_sendString(atCom2);
 1ee:	8e e5       	ldi	r24, 0x5E	; 94
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 96 00 	call	0x12c	; 0x12c <uart_sendString>
 1f6:	9f e7       	ldi	r25, 0x7F	; 127
 1f8:	24 e8       	ldi	r18, 0x84	; 132
 1fa:	3e e1       	ldi	r19, 0x1E	; 30
 1fc:	91 50       	subi	r25, 0x01	; 1
 1fe:	20 40       	sbci	r18, 0x00	; 0
 200:	30 40       	sbci	r19, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <wifiDirect_connection+0x48>
 204:	00 c0       	rjmp	.+0      	; 0x206 <wifiDirect_connection+0x52>
 206:	00 00       	nop
	_delay_ms(500);
	uart_sendString(atCom3);
 208:	85 e1       	ldi	r24, 0x15	; 21
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 96 00 	call	0x12c	; 0x12c <uart_sendString>
 210:	8f e7       	ldi	r24, 0x7F	; 127
 212:	94 e8       	ldi	r25, 0x84	; 132
 214:	2e e1       	ldi	r18, 0x1E	; 30
 216:	81 50       	subi	r24, 0x01	; 1
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	20 40       	sbci	r18, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <wifiDirect_connection+0x62>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <wifiDirect_connection+0x6c>
 220:	00 00       	nop
	_delay_ms(500);
	uart_sendString(atCom4);
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 96 00 	call	0x12c	; 0x12c <uart_sendString>
	PORTD ^= (1 << LED_YELLOW);
 22a:	9b b1       	in	r25, 0x0b	; 11
 22c:	80 e4       	ldi	r24, 0x40	; 64
 22e:	89 27       	eor	r24, r25
 230:	8b b9       	out	0x0b, r24	; 11
 232:	08 95       	ret

00000234 <__vector_20>:
}

ISR(USART0_RX_vect) {
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	2f 93       	push	r18
 240:	3f 93       	push	r19
 242:	4f 93       	push	r20
 244:	5f 93       	push	r21
 246:	6f 93       	push	r22
 248:	7f 93       	push	r23
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
	REC = UDR0;
 256:	80 91 c6 00 	lds	r24, 0x00C6
 25a:	80 93 8c 01 	sts	0x018C, r24
	recMsg[msgInt] = REC;
 25e:	e0 91 8a 01 	lds	r30, 0x018A
 262:	f0 91 8b 01 	lds	r31, 0x018B
 266:	80 91 8c 01 	lds	r24, 0x018C
 26a:	e3 57       	subi	r30, 0x73	; 115
 26c:	fe 4f       	sbci	r31, 0xFE	; 254
 26e:	80 83       	st	Z, r24
	if(REC == '\n') {
 270:	80 91 8c 01 	lds	r24, 0x018C
 274:	8a 30       	cpi	r24, 0x0A	; 10
 276:	f9 f4       	brne	.+62     	; 0x2b6 <__vector_20+0x82>
		recMsg[msgInt++] = '\0';
 278:	80 91 8a 01 	lds	r24, 0x018A
 27c:	90 91 8b 01 	lds	r25, 0x018B
 280:	9c 01       	movw	r18, r24
 282:	2f 5f       	subi	r18, 0xFF	; 255
 284:	3f 4f       	sbci	r19, 0xFF	; 255
 286:	30 93 8b 01 	sts	0x018B, r19
 28a:	20 93 8a 01 	sts	0x018A, r18
 28e:	fc 01       	movw	r30, r24
 290:	e3 57       	subi	r30, 0x73	; 115
 292:	fe 4f       	sbci	r31, 0xFE	; 254
 294:	10 82       	st	Z, r1
		msgInt = 0;
 296:	10 92 8b 01 	sts	0x018B, r1
 29a:	10 92 8a 01 	sts	0x018A, r1
		uart_sendString2(recMsg);
 29e:	8d e8       	ldi	r24, 0x8D	; 141
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 b8 00 	call	0x170	; 0x170 <uart_sendString2>
		memset(&recMsg[0], 0, sizeof(recMsg));
 2a6:	84 e6       	ldi	r24, 0x64	; 100
 2a8:	ed e8       	ldi	r30, 0x8D	; 141
 2aa:	f1 e0       	ldi	r31, 0x01	; 1
 2ac:	df 01       	movw	r26, r30
 2ae:	1d 92       	st	X+, r1
 2b0:	8a 95       	dec	r24
 2b2:	e9 f7       	brne	.-6      	; 0x2ae <__vector_20+0x7a>
 2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <__vector_20+0x94>
	} else {
		msgInt++;
 2b6:	80 91 8a 01 	lds	r24, 0x018A
 2ba:	90 91 8b 01 	lds	r25, 0x018B
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	90 93 8b 01 	sts	0x018B, r25
 2c4:	80 93 8a 01 	sts	0x018A, r24
	}
}
 2c8:	ff 91       	pop	r31
 2ca:	ef 91       	pop	r30
 2cc:	bf 91       	pop	r27
 2ce:	af 91       	pop	r26
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	7f 91       	pop	r23
 2d6:	6f 91       	pop	r22
 2d8:	5f 91       	pop	r21
 2da:	4f 91       	pop	r20
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <main>:

int main(void)
{
	DDRD |= (1 << LED_GREEN);
 2ea:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << LED_YELLOW);
 2ec:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << LED_RED);
 2ee:	57 9a       	sbi	0x0a, 7	; 10
	
	PORTD &= ~(1 << LED_GREEN);
 2f0:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~(1 << LED_YELLOW);
 2f2:	5e 98       	cbi	0x0b, 6	; 11
	PORTD &= ~(1 << LED_RED);
 2f4:	5f 98       	cbi	0x0b, 7	; 11
	
	uart_init();
 2f6:	0e 94 5d 00 	call	0xba	; 0xba <uart_init>
	uart_init2();
 2fa:	0e 94 76 00 	call	0xec	; 0xec <uart_init2>
	
	wifiDirect_connection();
 2fe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <wifiDirect_connection>
	
    while(1)
    {
		PORTD ^= (1 << LED_GREEN);
 302:	90 e2       	ldi	r25, 0x20	; 32
 304:	8b b1       	in	r24, 0x0b	; 11
 306:	89 27       	eor	r24, r25
 308:	8b b9       	out	0x0b, r24	; 11
 30a:	2f e7       	ldi	r18, 0x7F	; 127
 30c:	34 e8       	ldi	r19, 0x84	; 132
 30e:	8e e1       	ldi	r24, 0x1E	; 30
 310:	21 50       	subi	r18, 0x01	; 1
 312:	30 40       	sbci	r19, 0x00	; 0
 314:	80 40       	sbci	r24, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <main+0x26>
 318:	00 c0       	rjmp	.+0      	; 0x31a <main+0x30>
 31a:	00 00       	nop
 31c:	f3 cf       	rjmp	.-26     	; 0x304 <main+0x1a>

0000031e <_exit>:
 31e:	f8 94       	cli

00000320 <__stop_program>:
 320:	ff cf       	rjmp	.-2      	; 0x320 <__stop_program>
