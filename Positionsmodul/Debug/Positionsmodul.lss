
Positionsmodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000183  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000013f  00000000  00000000  00000347  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000188  00000000  00000000  00000486  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000054  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001a8  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000028  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  8c:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <uart_init>:
#include "Positionsmodul.h"
#include <util/delay.h>
#include <avr/interrupt.h>

void uart_init(void) {
	UBRR0H = (BAUDRATE >> 8);
  94:	82 e8       	ldi	r24, 0x82	; 130
  96:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = BAUDRATE;
  9a:	84 e3       	ldi	r24, 0x34	; 52
  9c:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);
  a0:	e1 ec       	ldi	r30, 0xC1	; 193
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	88 61       	ori	r24, 0x18	; 24
  a8:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | ( 1<< UCSZ00);
  aa:	a2 ec       	ldi	r26, 0xC2	; 194
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	8c 91       	ld	r24, X
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	8c 93       	st	X, r24
	
	UCSR0B |= (1 << RXCIE0);
  b4:	80 81       	ld	r24, Z
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	80 83       	st	Z, r24
	UCSR0A |= (1 << RXC0);
  ba:	e0 ec       	ldi	r30, 0xC0	; 192
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	80 83       	st	Z, r24
	
	DDRD &= ~_BV(DDD0);
  c4:	50 98       	cbi	0x0a, 0	; 10
	DDRD |= _BV(DDD1);
  c6:	51 9a       	sbi	0x0a, 1	; 10
	
	sei();
  c8:	78 94       	sei
  ca:	08 95       	ret

000000cc <uart_transmit>:
}

void uart_transmit(unsigned char c) {
	while(!(UCSR0A & (1 << UDRE0)));
  cc:	e0 ec       	ldi	r30, 0xC0	; 192
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	90 81       	ld	r25, Z
  d2:	95 ff       	sbrs	r25, 5
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <uart_transmit+0x4>
	UDR0 = c;
  d6:	80 93 c6 00 	sts	0x00C6, r24
  da:	08 95       	ret

000000dc <main>:
	return UDR0;
}

int main(void)
{
	DDRD |= (1 << LED_GREEN);
  dc:	55 9a       	sbi	0x0a, 5	; 10
	
	uart_init();
  de:	0e 94 4a 00 	call	0x94	; 0x94 <uart_init>
	
	
    while(1)
    {
		uart_transmit('a');
		PORTD ^= (1 << LED_GREEN);
  e2:	c0 e2       	ldi	r28, 0x20	; 32
	uart_init();
	
	
    while(1)
    {
		uart_transmit('a');
  e4:	81 e6       	ldi	r24, 0x61	; 97
  e6:	0e 94 66 00 	call	0xcc	; 0xcc <uart_transmit>
		PORTD ^= (1 << LED_GREEN);
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8c 27       	eor	r24, r28
  ee:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	88 e0       	ldi	r24, 0x08	; 8
  f4:	9d e3       	ldi	r25, 0x3D	; 61
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x1a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x24>
 100:	00 00       	nop
 102:	f0 cf       	rjmp	.-32     	; 0xe4 <main+0x8>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
