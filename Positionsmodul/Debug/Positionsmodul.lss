
Positionsmodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00000ca8  00000d3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ca8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000145  0080020c  0080020c  00000e48  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cda  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000260  00000000  00000000  00001c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e8  00000000  00000000  00001e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000294  00000000  00000000  00002270  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  00002504  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005d7  00000000  00000000  0000283e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002e15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_20>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 24 03 	jmp	0x648	; 0x648 <__vector_28>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	12 e0       	ldi	r17, 0x02	; 2
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e8 ea       	ldi	r30, 0xA8	; 168
  90:	fc e0       	ldi	r31, 0x0C	; 12
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ac 30       	cpi	r26, 0x0C	; 12
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	23 e0       	ldi	r18, 0x03	; 3
  a0:	ac e0       	ldi	r26, 0x0C	; 12
  a2:	b2 e0       	ldi	r27, 0x02	; 2
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a1 35       	cpi	r26, 0x51	; 81
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 54 03 	call	0x6a8	; 0x6a8 <main>
  b2:	0c 94 52 06 	jmp	0xca4	; 0xca4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <uart_init>:
volatile int msgInt2 = 0;

volatile int start_transmission = 0;

void uart_init(void) {
	UBRR0H = (BAUDRATE >> 8);
  ba:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUDRATE;
  be:	81 e8       	ldi	r24, 0x81	; 129
  c0:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);
  c4:	e1 ec       	ldi	r30, 0xC1	; 193
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	88 61       	ori	r24, 0x18	; 24
  cc:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | ( 1<< UCSZ00);
  ce:	a2 ec       	ldi	r26, 0xC2	; 194
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	8c 91       	ld	r24, X
  d4:	86 60       	ori	r24, 0x06	; 6
  d6:	8c 93       	st	X, r24
	
	UCSR0B |= (1 << RXCIE0);
  d8:	80 81       	ld	r24, Z
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	80 83       	st	Z, r24
	UCSR0A |= (1 << RXC0);
  de:	e0 ec       	ldi	r30, 0xC0	; 192
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	
	sei();
  e8:	78 94       	sei
  ea:	08 95       	ret

000000ec <uart_init2>:
}

void uart_init2(void) {
	UBRR1H = (BAUDRATE >> 8);
  ec:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = BAUDRATE;
  f0:	81 e8       	ldi	r24, 0x81	; 129
  f2:	80 93 cc 00 	sts	0x00CC, r24
	
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);
  f6:	e9 ec       	ldi	r30, 0xC9	; 201
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 61       	ori	r24, 0x18	; 24
  fe:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | ( 1<< UCSZ10);
 100:	aa ec       	ldi	r26, 0xCA	; 202
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	8c 91       	ld	r24, X
 106:	86 60       	ori	r24, 0x06	; 6
 108:	8c 93       	st	X, r24
	
	UCSR1B |= (1 << RXCIE1);
 10a:	80 81       	ld	r24, Z
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	80 83       	st	Z, r24
	UCSR1A | (1 << RXC1);
 110:	80 91 c8 00 	lds	r24, 0x00C8
	
	sei();
 114:	78 94       	sei
 116:	08 95       	ret

00000118 <uart_transmit>:
}

void uart_transmit(char c) {
	while(!(UCSR0A & (1 << UDRE0))) {
 118:	e0 ec       	ldi	r30, 0xC0	; 192
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	90 81       	ld	r25, Z
 11e:	95 ff       	sbrs	r25, 5
 120:	fd cf       	rjmp	.-6      	; 0x11c <uart_transmit+0x4>
	}
	UDR0 = c;
 122:	80 93 c6 00 	sts	0x00C6, r24
 126:	08 95       	ret

00000128 <uart_sendString>:
char uart_read2() {
	while(!(UCSR1A & (1 << RXC1)));
	return UDR1;
}

void uart_sendString(char temp[]) {
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	8c 01       	movw	r16, r24
 136:	7c 01       	movw	r14, r24
	for(int i=0; i < strlen(temp); i++) {
 138:	c0 e0       	ldi	r28, 0x00	; 0
 13a:	d0 e0       	ldi	r29, 0x00	; 0
 13c:	06 c0       	rjmp	.+12     	; 0x14a <uart_sendString+0x22>
		uart_transmit(temp[i]);
 13e:	f7 01       	movw	r30, r14
 140:	81 91       	ld	r24, Z+
 142:	7f 01       	movw	r14, r30
 144:	0e 94 8c 00 	call	0x118	; 0x118 <uart_transmit>
	while(!(UCSR1A & (1 << RXC1)));
	return UDR1;
}

void uart_sendString(char temp[]) {
	for(int i=0; i < strlen(temp); i++) {
 148:	21 96       	adiw	r28, 0x01	; 1
 14a:	f8 01       	movw	r30, r16
 14c:	01 90       	ld	r0, Z+
 14e:	00 20       	and	r0, r0
 150:	e9 f7       	brne	.-6      	; 0x14c <uart_sendString+0x24>
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	e0 1b       	sub	r30, r16
 156:	f1 0b       	sbc	r31, r17
 158:	ce 17       	cp	r28, r30
 15a:	df 07       	cpc	r29, r31
 15c:	80 f3       	brcs	.-32     	; 0x13e <uart_sendString+0x16>
		uart_transmit(temp[i]);
	}
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	ff 90       	pop	r15
 168:	ef 90       	pop	r14
 16a:	08 95       	ret

0000016c <wifiDirect_connection>:
		uart_transmit2(temp[i]);
	}
}

void wifiDirect_connection() {
	PORTD ^= (1 << LED_YELLOW);
 16c:	9b b1       	in	r25, 0x0b	; 11
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	89 27       	eor	r24, r25
 172:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	88 e0       	ldi	r24, 0x08	; 8
 178:	9d e3       	ldi	r25, 0x3D	; 61
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <wifiDirect_connection+0xe>
 182:	00 c0       	rjmp	.+0      	; 0x184 <wifiDirect_connection+0x18>
 184:	00 00       	nop
	_delay_ms(1000);
	uart_sendString(atCom1);
 186:	86 e9       	ldi	r24, 0x96	; 150
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 94 00 	call	0x128	; 0x128 <uart_sendString>
 18e:	2f e7       	ldi	r18, 0x7F	; 127
 190:	84 e8       	ldi	r24, 0x84	; 132
 192:	9e e1       	ldi	r25, 0x1E	; 30
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <wifiDirect_connection+0x28>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <wifiDirect_connection+0x32>
 19e:	00 00       	nop
	_delay_ms(500);
	uart_sendString(atCom2);
 1a0:	8c e8       	ldi	r24, 0x8C	; 140
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 94 00 	call	0x128	; 0x128 <uart_sendString>
 1a8:	2f e7       	ldi	r18, 0x7F	; 127
 1aa:	84 e8       	ldi	r24, 0x84	; 132
 1ac:	9e e1       	ldi	r25, 0x1E	; 30
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <wifiDirect_connection+0x42>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <wifiDirect_connection+0x4c>
 1b8:	00 00       	nop
	_delay_ms(500);
	uart_sendString(atCom3);
 1ba:	8a e6       	ldi	r24, 0x6A	; 106
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	0e 94 94 00 	call	0x128	; 0x128 <uart_sendString>
 1c2:	2f e7       	ldi	r18, 0x7F	; 127
 1c4:	84 e8       	ldi	r24, 0x84	; 132
 1c6:	9e e1       	ldi	r25, 0x1E	; 30
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <wifiDirect_connection+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <wifiDirect_connection+0x66>
 1d2:	00 00       	nop
	_delay_ms(500);
	uart_sendString(atCom4);
 1d4:	81 e2       	ldi	r24, 0x21	; 33
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 94 00 	call	0x128	; 0x128 <uart_sendString>
 1dc:	2f e7       	ldi	r18, 0x7F	; 127
 1de:	84 e8       	ldi	r24, 0x84	; 132
 1e0:	9e e1       	ldi	r25, 0x1E	; 30
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <wifiDirect_connection+0x76>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <wifiDirect_connection+0x80>
 1ec:	00 00       	nop
	_delay_ms(500);
	uart_sendString(atCom5);
 1ee:	8d e0       	ldi	r24, 0x0D	; 13
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 94 00 	call	0x128	; 0x128 <uart_sendString>
	PORTD ^= (1 << LED_YELLOW);
 1f6:	9b b1       	in	r25, 0x0b	; 11
 1f8:	80 e4       	ldi	r24, 0x40	; 64
 1fa:	89 27       	eor	r24, r25
 1fc:	8b b9       	out	0x0b, r24	; 11
 1fe:	08 95       	ret

00000200 <grp_request>:
}

void grp_request() {
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	c7 57       	subi	r28, 0x77	; 119
 20e:	d1 09       	sbc	r29, r1
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	f8 94       	cli
 214:	de bf       	out	0x3e, r29	; 62
 216:	0f be       	out	0x3f, r0	; 63
 218:	cd bf       	out	0x3d, r28	; 61
 21a:	2a e2       	ldi	r18, 0x2A	; 42
 21c:	30 e5       	ldi	r19, 0x50	; 80
 21e:	8e ef       	ldi	r24, 0xFE	; 254
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	21 50       	subi	r18, 0x01	; 1
 224:	30 40       	sbci	r19, 0x00	; 0
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	d9 f7       	brne	.-10     	; 0x222 <grp_request+0x22>
 22c:	00 00       	nop
	_delay_ms(5000);
	do 
	{
		
		char ppd[30];
		char p1[] = {"at+p2ppd="};
 22e:	ce 01       	movw	r24, r28
 230:	87 59       	subi	r24, 0x97	; 151
 232:	9f 4f       	sbci	r25, 0xFF	; 255
 234:	2a e0       	ldi	r18, 0x0A	; 10
 236:	e2 ec       	ldi	r30, 0xC2	; 194
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	dc 01       	movw	r26, r24
 23c:	01 90       	ld	r0, Z+
 23e:	0d 92       	st	X+, r0
 240:	2a 95       	dec	r18
 242:	e1 f7       	brne	.-8      	; 0x23c <grp_request+0x3c>
		char p2[] = {",0\n\r"};
 244:	9e 01       	movw	r18, r28
 246:	2d 58       	subi	r18, 0x8D	; 141
 248:	3f 4f       	sbci	r19, 0xFF	; 255
 24a:	45 e0       	ldi	r20, 0x05	; 5
 24c:	e4 ee       	ldi	r30, 0xE4	; 228
 24e:	f1 e0       	ldi	r31, 0x01	; 1
 250:	d9 01       	movw	r26, r18
 252:	01 90       	ld	r0, Z+
 254:	0d 92       	st	X+, r0
 256:	4a 95       	dec	r20
 258:	e1 f7       	brne	.-8      	; 0x252 <grp_request+0x52>
		sprintf(ppd, "%s%s%s", p1, macAddress, p2);			//add found Mac-Address
 25a:	3f 93       	push	r19
 25c:	2f 93       	push	r18
 25e:	2e e3       	ldi	r18, 0x3E	; 62
 260:	33 e0       	ldi	r19, 0x03	; 3
 262:	3f 93       	push	r19
 264:	2f 93       	push	r18
 266:	9f 93       	push	r25
 268:	8f 93       	push	r24
 26a:	8b eb       	ldi	r24, 0xBB	; 187
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	9f 93       	push	r25
 270:	8f 93       	push	r24
 272:	8e 01       	movw	r16, r28
 274:	02 5d       	subi	r16, 0xD2	; 210
 276:	1f 4f       	sbci	r17, 0xFF	; 255
 278:	1f 93       	push	r17
 27a:	0f 93       	push	r16
 27c:	0e 94 81 03 	call	0x702	; 0x702 <sprintf>
		uart_sendString(ppd);								//ppd request
 280:	c8 01       	movw	r24, r16
 282:	0e 94 94 00 	call	0x128	; 0x128 <uart_sendString>
 286:	2a e2       	ldi	r18, 0x2A	; 42
 288:	30 e5       	ldi	r19, 0x50	; 80
 28a:	8e ef       	ldi	r24, 0xFE	; 254
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	30 40       	sbci	r19, 0x00	; 0
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	d9 f7       	brne	.-10     	; 0x28e <grp_request+0x8e>
 298:	00 00       	nop
		
		_delay_ms(5000);									//wait for safety
		
		//at+p2pgrpform=7a:f8:82:cb:a3:05,6,0,,1,0,0
		char grp_form[45];
		char p3[] = {"at+p2pgrpform="};
 29a:	ce 01       	movw	r24, r28
 29c:	84 5b       	subi	r24, 0xB4	; 180
 29e:	9f 4f       	sbci	r25, 0xFF	; 255
 2a0:	2f e0       	ldi	r18, 0x0F	; 15
 2a2:	ec ec       	ldi	r30, 0xCC	; 204
 2a4:	f1 e0       	ldi	r31, 0x01	; 1
 2a6:	dc 01       	movw	r26, r24
 2a8:	01 90       	ld	r0, Z+
 2aa:	0d 92       	st	X+, r0
 2ac:	2a 95       	dec	r18
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <grp_request+0xa8>
		char p4[] = {",6,0,,1,0,0\n\r"};
 2b0:	9e 01       	movw	r18, r28
 2b2:	25 5a       	subi	r18, 0xA5	; 165
 2b4:	3f 4f       	sbci	r19, 0xFF	; 255
 2b6:	4e e0       	ldi	r20, 0x0E	; 14
 2b8:	eb ed       	ldi	r30, 0xDB	; 219
 2ba:	f1 e0       	ldi	r31, 0x01	; 1
 2bc:	d9 01       	movw	r26, r18
 2be:	01 90       	ld	r0, Z+
 2c0:	0d 92       	st	X+, r0
 2c2:	4a 95       	dec	r20
 2c4:	e1 f7       	brne	.-8      	; 0x2be <grp_request+0xbe>
		sprintf(grp_form, "%s%s%s", p3, macAddress, p4);	//add found Mac-Address
 2c6:	3f 93       	push	r19
 2c8:	2f 93       	push	r18
 2ca:	2e e3       	ldi	r18, 0x3E	; 62
 2cc:	33 e0       	ldi	r19, 0x03	; 3
 2ce:	3f 93       	push	r19
 2d0:	2f 93       	push	r18
 2d2:	9f 93       	push	r25
 2d4:	8f 93       	push	r24
 2d6:	8b eb       	ldi	r24, 0xBB	; 187
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	9f 93       	push	r25
 2dc:	8f 93       	push	r24
 2de:	0d 52       	subi	r16, 0x2D	; 45
 2e0:	11 09       	sbc	r17, r1
 2e2:	1f 93       	push	r17
 2e4:	0f 93       	push	r16
 2e6:	0e 94 81 03 	call	0x702	; 0x702 <sprintf>
		uart_sendString(grp_form);							//groupform request
 2ea:	c8 01       	movw	r24, r16
 2ec:	0e 94 94 00 	call	0x128	; 0x128 <uart_sendString>
 2f0:	2f ef       	ldi	r18, 0xFF	; 255
 2f2:	3a e1       	ldi	r19, 0x1A	; 26
 2f4:	87 eb       	ldi	r24, 0xB7	; 183
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	30 40       	sbci	r19, 0x00	; 0
 2fa:	80 40       	sbci	r24, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <grp_request+0xf6>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <grp_request+0x100>
 300:	00 00       	nop
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	f8 94       	cli
 306:	de bf       	out	0x3e, r29	; 62
 308:	0f be       	out	0x3f, r0	; 63
 30a:	cd bf       	out	0x3d, r28	; 61
		_delay_ms(3000);
		return;
	} while (macAddress[0] != '\0');
}
 30c:	c9 58       	subi	r28, 0x89	; 137
 30e:	df 4f       	sbci	r29, 0xFF	; 255
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	f8 94       	cli
 314:	de bf       	out	0x3e, r29	; 62
 316:	0f be       	out	0x3f, r0	; 63
 318:	cd bf       	out	0x3d, r28	; 61
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	08 95       	ret

00000324 <tcp_connection>:

void tcp_connection() {
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
 330:	ad 97       	sbiw	r28, 0x2d	; 45
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	f8 94       	cli
 336:	de bf       	out	0x3e, r29	; 62
 338:	0f be       	out	0x3f, r0	; 63
 33a:	cd bf       	out	0x3d, r28	; 61
	do 
	{
		uart_sendString("at+ndhcp=1\n\r");
 33c:	89 ee       	ldi	r24, 0xE9	; 233
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 94 00 	call	0x128	; 0x128 <uart_sendString>
 344:	2f e7       	ldi	r18, 0x7F	; 127
 346:	84 e8       	ldi	r24, 0x84	; 132
 348:	9e e1       	ldi	r25, 0x1E	; 30
 34a:	21 50       	subi	r18, 0x01	; 1
 34c:	80 40       	sbci	r24, 0x00	; 0
 34e:	90 40       	sbci	r25, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <tcp_connection+0x26>
 352:	00 c0       	rjmp	.+0      	; 0x354 <tcp_connection+0x30>
 354:	00 00       	nop
		_delay_ms(500);
		char nct[27];
		char p1[] = {"at+nctcp="};
 356:	8a e0       	ldi	r24, 0x0A	; 10
 358:	e6 ef       	ldi	r30, 0xF6	; 246
 35a:	f1 e0       	ldi	r31, 0x01	; 1
 35c:	de 01       	movw	r26, r28
 35e:	5c 96       	adiw	r26, 0x1c	; 28
 360:	01 90       	ld	r0, Z+
 362:	0d 92       	st	X+, r0
 364:	8a 95       	dec	r24
 366:	e1 f7       	brne	.-8      	; 0x360 <tcp_connection+0x3c>
		char p2[] = {",8288\n\r"};
 368:	88 e0       	ldi	r24, 0x08	; 8
 36a:	e0 e0       	ldi	r30, 0x00	; 0
 36c:	f2 e0       	ldi	r31, 0x02	; 2
 36e:	de 01       	movw	r26, r28
 370:	96 96       	adiw	r26, 0x26	; 38
 372:	01 90       	ld	r0, Z+
 374:	0d 92       	st	X+, r0
 376:	8a 95       	dec	r24
 378:	e1 f7       	brne	.-8      	; 0x372 <tcp_connection+0x4e>
		sprintf(nct, "%s%s%s",p1, host_ip, p2);				//add host_ip
 37a:	ce 01       	movw	r24, r28
 37c:	86 96       	adiw	r24, 0x26	; 38
 37e:	9f 93       	push	r25
 380:	8f 93       	push	r24
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	9f 93       	push	r25
 388:	8f 93       	push	r24
 38a:	ce 01       	movw	r24, r28
 38c:	4c 96       	adiw	r24, 0x1c	; 28
 38e:	9f 93       	push	r25
 390:	8f 93       	push	r24
 392:	8b eb       	ldi	r24, 0xBB	; 187
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	9f 93       	push	r25
 398:	8f 93       	push	r24
 39a:	8e 01       	movw	r16, r28
 39c:	0f 5f       	subi	r16, 0xFF	; 255
 39e:	1f 4f       	sbci	r17, 0xFF	; 255
 3a0:	1f 93       	push	r17
 3a2:	0f 93       	push	r16
 3a4:	0e 94 81 03 	call	0x702	; 0x702 <sprintf>
		uart_sendString(nct);
 3a8:	c8 01       	movw	r24, r16
 3aa:	0e 94 94 00 	call	0x128	; 0x128 <uart_sendString>
 3ae:	2f ef       	ldi	r18, 0xFF	; 255
 3b0:	8a e1       	ldi	r24, 0x1A	; 26
 3b2:	97 eb       	ldi	r25, 0xB7	; 183
 3b4:	21 50       	subi	r18, 0x01	; 1
 3b6:	80 40       	sbci	r24, 0x00	; 0
 3b8:	90 40       	sbci	r25, 0x00	; 0
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <tcp_connection+0x90>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <tcp_connection+0x9a>
 3be:	00 00       	nop
		_delay_ms(3000);
		start_transmission = 1;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	90 93 0d 02 	sts	0x020D, r25
 3c8:	80 93 0c 02 	sts	0x020C, r24
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
		return;
	} while (host_ip[0] != '\0');
}
 3d6:	ad 96       	adiw	r28, 0x2d	; 45
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	f8 94       	cli
 3dc:	de bf       	out	0x3e, r29	; 62
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	cd bf       	out	0x3d, r28	; 61
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
 3e8:	0f 91       	pop	r16
 3ea:	08 95       	ret

000003ec <get_macAddress>:

void get_hostIP(char tmp[]) {
	
}

void get_macAddress(char temp[]) {
 3ec:	0f 93       	push	r16
 3ee:	1f 93       	push	r17
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
 3f8:	6e 97       	sbiw	r28, 0x1e	; 30
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	f8 94       	cli
 3fe:	de bf       	out	0x3e, r29	; 62
 400:	0f be       	out	0x3f, r0	; 63
 402:	cd bf       	out	0x3d, r28	; 61
 404:	8c 01       	movw	r16, r24
	char subString[10];
	char p2p_found[10] = {"p2p-dev"};		//p2p device found
 406:	88 e0       	ldi	r24, 0x08	; 8
 408:	e7 ea       	ldi	r30, 0xA7	; 167
 40a:	f1 e0       	ldi	r31, 0x01	; 1
 40c:	de 01       	movw	r26, r28
 40e:	1b 96       	adiw	r26, 0x0b	; 11
 410:	01 90       	ld	r0, Z+
 412:	0d 92       	st	X+, r0
 414:	8a 95       	dec	r24
 416:	e1 f7       	brne	.-8      	; 0x410 <get_macAddress+0x24>
 418:	1c 8a       	std	Y+20, r1	; 0x14
 41a:	1b 8a       	std	Y+19, r1	; 0x13
	char p2p_found2[10] = {"p2v-fou"};		//backup
 41c:	88 e0       	ldi	r24, 0x08	; 8
 41e:	e1 eb       	ldi	r30, 0xB1	; 177
 420:	f1 e0       	ldi	r31, 0x01	; 1
 422:	de 01       	movw	r26, r28
 424:	55 96       	adiw	r26, 0x15	; 21
 426:	01 90       	ld	r0, Z+
 428:	0d 92       	st	X+, r0
 42a:	8a 95       	dec	r24
 42c:	e1 f7       	brne	.-8      	; 0x426 <get_macAddress+0x3a>
 42e:	1e 8e       	std	Y+30, r1	; 0x1e
 430:	1d 8e       	std	Y+29, r1	; 0x1d
	strncpy(subString, &temp[0], 7);
 432:	47 e0       	ldi	r20, 0x07	; 7
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	b8 01       	movw	r22, r16
 438:	ce 01       	movw	r24, r28
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <strncpy>
	subString[8] = '\n';
 440:	8a e0       	ldi	r24, 0x0A	; 10
 442:	89 87       	std	Y+9, r24	; 0x09
	subString[9] = '\0';
 444:	1a 86       	std	Y+10, r1	; 0x0a
	if(strcmp(p2p_found, subString) == 0) {
 446:	be 01       	movw	r22, r28
 448:	6f 5f       	subi	r22, 0xFF	; 255
 44a:	7f 4f       	sbci	r23, 0xFF	; 255
 44c:	ce 01       	movw	r24, r28
 44e:	0b 96       	adiw	r24, 0x0b	; 11
 450:	0e 94 69 03 	call	0x6d2	; 0x6d2 <strcmp>
 454:	89 2b       	or	r24, r25
 456:	79 f4       	brne	.+30     	; 0x476 <get_macAddress+0x8a>
		PORTD ^= (1 << LED_RED);
 458:	8b b1       	in	r24, 0x0b	; 11
 45a:	80 58       	subi	r24, 0x80	; 128
 45c:	8b b9       	out	0x0b, r24	; 11
		strncpy(&macAddress, &temp[14], 17);		//string copy Mac-Address
 45e:	b8 01       	movw	r22, r16
 460:	62 5f       	subi	r22, 0xF2	; 242
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	41 e1       	ldi	r20, 0x11	; 17
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	8e e3       	ldi	r24, 0x3E	; 62
 46a:	93 e0       	ldi	r25, 0x03	; 3
 46c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <strncpy>
		macAddress[18] = '\0';
 470:	10 92 50 03 	sts	0x0350, r1
 474:	17 c0       	rjmp	.+46     	; 0x4a4 <get_macAddress+0xb8>
	} else if(strcmp(p2p_found2, subString) == 0) {
 476:	be 01       	movw	r22, r28
 478:	6f 5f       	subi	r22, 0xFF	; 255
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	ce 01       	movw	r24, r28
 47e:	45 96       	adiw	r24, 0x15	; 21
 480:	0e 94 69 03 	call	0x6d2	; 0x6d2 <strcmp>
 484:	89 2b       	or	r24, r25
 486:	71 f4       	brne	.+28     	; 0x4a4 <get_macAddress+0xb8>
		PORTD ^= (1 << LED_RED);
 488:	8b b1       	in	r24, 0x0b	; 11
 48a:	80 58       	subi	r24, 0x80	; 128
 48c:	8b b9       	out	0x0b, r24	; 11
		strncpy(&macAddress, &temp[10], 17);
 48e:	b8 01       	movw	r22, r16
 490:	66 5f       	subi	r22, 0xF6	; 246
 492:	7f 4f       	sbci	r23, 0xFF	; 255
 494:	41 e1       	ldi	r20, 0x11	; 17
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	8e e3       	ldi	r24, 0x3E	; 62
 49a:	93 e0       	ldi	r25, 0x03	; 3
 49c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <strncpy>
		macAddress[18] = '\0';
 4a0:	10 92 50 03 	sts	0x0350, r1
	}
}
 4a4:	6e 96       	adiw	r28, 0x1e	; 30
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	f8 94       	cli
 4aa:	de bf       	out	0x3e, r29	; 62
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	cd bf       	out	0x3d, r28	; 61
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	08 95       	ret

000004ba <sendDataSingle>:
	const unsigned char p3[] = {0x1B, 0x45};				//HEY = <ESC> E
	sprintf(temp, "%s%s%s", s, data, p3);
	uart_sendString(temp);
}

void sendDataSingle(char tmpChar) {
 4ba:	ff 92       	push	r15
 4bc:	0f 93       	push	r16
 4be:	1f 93       	push	r17
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
 4c8:	62 97       	sbiw	r28, 0x12	; 18
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	f8 94       	cli
 4ce:	de bf       	out	0x3e, r29	; 62
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	cd bf       	out	0x3d, r28	; 61
	if(start_transmission != 1)
 4d4:	20 91 0c 02 	lds	r18, 0x020C
 4d8:	30 91 0d 02 	lds	r19, 0x020D
 4dc:	21 30       	cpi	r18, 0x01	; 1
 4de:	31 05       	cpc	r19, r1
 4e0:	c1 f5       	brne	.+112    	; 0x552 <sendDataSingle+0x98>
		return;
	if(tmpChar == '\n' || tmpChar == '\r')
 4e2:	8a 30       	cpi	r24, 0x0A	; 10
 4e4:	b1 f1       	breq	.+108    	; 0x552 <sendDataSingle+0x98>
 4e6:	8d 30       	cpi	r24, 0x0D	; 13
 4e8:	a1 f1       	breq	.+104    	; 0x552 <sendDataSingle+0x98>
		return;
		
	const unsigned char temp[12];
	const unsigned char s[] = {0x1B, 0x53, 0x30};			//Hex = <ESC> S <CID>
 4ea:	0f 2e       	mov	r0, r31
 4ec:	fb e1       	ldi	r31, 0x1B	; 27
 4ee:	ff 2e       	mov	r15, r31
 4f0:	f0 2d       	mov	r31, r0
 4f2:	fd 86       	std	Y+13, r15	; 0x0d
 4f4:	93 e5       	ldi	r25, 0x53	; 83
 4f6:	9e 87       	std	Y+14, r25	; 0x0e
 4f8:	90 e3       	ldi	r25, 0x30	; 48
 4fa:	9f 87       	std	Y+15, r25	; 0x0f
	unsigned char m[] = {"Hello"};
	const unsigned char c = 'a';
	unsigned char lul[1];
	sprintf(lul, "%c", tmpChar);
 4fc:	1f 92       	push	r1
 4fe:	8f 93       	push	r24
 500:	88 e0       	ldi	r24, 0x08	; 8
 502:	92 e0       	ldi	r25, 0x02	; 2
 504:	9f 93       	push	r25
 506:	8f 93       	push	r24
 508:	8e 01       	movw	r16, r28
 50a:	00 5f       	subi	r16, 0xF0	; 240
 50c:	1f 4f       	sbci	r17, 0xFF	; 255
 50e:	1f 93       	push	r17
 510:	0f 93       	push	r16
 512:	0e 94 81 03 	call	0x702	; 0x702 <sprintf>
	const unsigned char p3[] = {0x1B, 0x45};				//HEY = <ESC> E
 516:	f9 8a       	std	Y+17, r15	; 0x11
 518:	85 e4       	ldi	r24, 0x45	; 69
 51a:	8a 8b       	std	Y+18, r24	; 0x12
	sprintf(temp, "%s%s%s", s, lul, p3);
 51c:	ce 01       	movw	r24, r28
 51e:	41 96       	adiw	r24, 0x11	; 17
 520:	9f 93       	push	r25
 522:	8f 93       	push	r24
 524:	1f 93       	push	r17
 526:	0f 93       	push	r16
 528:	04 97       	sbiw	r24, 0x04	; 4
 52a:	9f 93       	push	r25
 52c:	8f 93       	push	r24
 52e:	8b eb       	ldi	r24, 0xBB	; 187
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	9f 93       	push	r25
 534:	8f 93       	push	r24
 536:	0f 50       	subi	r16, 0x0F	; 15
 538:	11 09       	sbc	r17, r1
 53a:	1f 93       	push	r17
 53c:	0f 93       	push	r16
 53e:	0e 94 81 03 	call	0x702	; 0x702 <sprintf>
	uart_sendString(temp);
 542:	c8 01       	movw	r24, r16
 544:	0e 94 94 00 	call	0x128	; 0x128 <uart_sendString>
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	f8 94       	cli
 54c:	de bf       	out	0x3e, r29	; 62
 54e:	0f be       	out	0x3f, r0	; 63
 550:	cd bf       	out	0x3d, r28	; 61
}
 552:	62 96       	adiw	r28, 0x12	; 18
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	f8 94       	cli
 558:	de bf       	out	0x3e, r29	; 62
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	cd bf       	out	0x3d, r28	; 61
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	ff 90       	pop	r15
 568:	08 95       	ret

0000056a <__vector_20>:

ISR(USART0_RX_vect) {
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	2f 93       	push	r18
 576:	3f 93       	push	r19
 578:	4f 93       	push	r20
 57a:	5f 93       	push	r21
 57c:	6f 93       	push	r22
 57e:	7f 93       	push	r23
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
 584:	af 93       	push	r26
 586:	bf 93       	push	r27
 588:	ef 93       	push	r30
 58a:	ff 93       	push	r31
	REC = UDR0;
 58c:	80 91 c6 00 	lds	r24, 0x00C6
 590:	80 93 10 02 	sts	0x0210, r24
	recMsg[msgInt] = REC;
 594:	e0 91 0e 02 	lds	r30, 0x020E
 598:	f0 91 0f 02 	lds	r31, 0x020F
 59c:	80 91 10 02 	lds	r24, 0x0210
 5a0:	e6 52       	subi	r30, 0x26	; 38
 5a2:	fd 4f       	sbci	r31, 0xFD	; 253
 5a4:	80 83       	st	Z, r24
	if(REC == '\n') {
 5a6:	80 91 10 02 	lds	r24, 0x0210
 5aa:	8a 30       	cpi	r24, 0x0A	; 10
 5ac:	79 f5       	brne	.+94     	; 0x60c <__vector_20+0xa2>
		recMsg[msgInt++] = '\n';
 5ae:	80 91 0e 02 	lds	r24, 0x020E
 5b2:	90 91 0f 02 	lds	r25, 0x020F
 5b6:	9c 01       	movw	r18, r24
 5b8:	2f 5f       	subi	r18, 0xFF	; 255
 5ba:	3f 4f       	sbci	r19, 0xFF	; 255
 5bc:	30 93 0f 02 	sts	0x020F, r19
 5c0:	20 93 0e 02 	sts	0x020E, r18
 5c4:	fc 01       	movw	r30, r24
 5c6:	e6 52       	subi	r30, 0x26	; 38
 5c8:	fd 4f       	sbci	r31, 0xFD	; 253
 5ca:	2a e0       	ldi	r18, 0x0A	; 10
 5cc:	20 83       	st	Z, r18
		recMsg[msgInt++] = '\0';
 5ce:	80 91 0e 02 	lds	r24, 0x020E
 5d2:	90 91 0f 02 	lds	r25, 0x020F
 5d6:	9c 01       	movw	r18, r24
 5d8:	2f 5f       	subi	r18, 0xFF	; 255
 5da:	3f 4f       	sbci	r19, 0xFF	; 255
 5dc:	30 93 0f 02 	sts	0x020F, r19
 5e0:	20 93 0e 02 	sts	0x020E, r18
 5e4:	fc 01       	movw	r30, r24
 5e6:	e6 52       	subi	r30, 0x26	; 38
 5e8:	fd 4f       	sbci	r31, 0xFD	; 253
 5ea:	10 82       	st	Z, r1
		msgInt = 0;
 5ec:	10 92 0f 02 	sts	0x020F, r1
 5f0:	10 92 0e 02 	sts	0x020E, r1
		get_macAddress(recMsg);
 5f4:	8a ed       	ldi	r24, 0xDA	; 218
 5f6:	92 e0       	ldi	r25, 0x02	; 2
 5f8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <get_macAddress>
		get_hostIP(recMsg);
		memset(&recMsg[0], 0, sizeof(recMsg));
 5fc:	84 e6       	ldi	r24, 0x64	; 100
 5fe:	ea ed       	ldi	r30, 0xDA	; 218
 600:	f2 e0       	ldi	r31, 0x02	; 2
 602:	df 01       	movw	r26, r30
 604:	1d 92       	st	X+, r1
 606:	8a 95       	dec	r24
 608:	e9 f7       	brne	.-6      	; 0x604 <__vector_20+0x9a>
 60a:	0d c0       	rjmp	.+26     	; 0x626 <__vector_20+0xbc>
	} else if (REC == '\r')	{
 60c:	80 91 10 02 	lds	r24, 0x0210
 610:	8d 30       	cpi	r24, 0x0D	; 13
 612:	49 f0       	breq	.+18     	; 0x626 <__vector_20+0xbc>
	} else {
		msgInt++;
 614:	80 91 0e 02 	lds	r24, 0x020E
 618:	90 91 0f 02 	lds	r25, 0x020F
 61c:	01 96       	adiw	r24, 0x01	; 1
 61e:	90 93 0f 02 	sts	0x020F, r25
 622:	80 93 0e 02 	sts	0x020E, r24
	}
}
 626:	ff 91       	pop	r31
 628:	ef 91       	pop	r30
 62a:	bf 91       	pop	r27
 62c:	af 91       	pop	r26
 62e:	9f 91       	pop	r25
 630:	8f 91       	pop	r24
 632:	7f 91       	pop	r23
 634:	6f 91       	pop	r22
 636:	5f 91       	pop	r21
 638:	4f 91       	pop	r20
 63a:	3f 91       	pop	r19
 63c:	2f 91       	pop	r18
 63e:	0f 90       	pop	r0
 640:	0f be       	out	0x3f, r0	; 63
 642:	0f 90       	pop	r0
 644:	1f 90       	pop	r1
 646:	18 95       	reti

00000648 <__vector_28>:

ISR(USART1_RX_vect) {
 648:	1f 92       	push	r1
 64a:	0f 92       	push	r0
 64c:	0f b6       	in	r0, 0x3f	; 63
 64e:	0f 92       	push	r0
 650:	11 24       	eor	r1, r1
 652:	2f 93       	push	r18
 654:	3f 93       	push	r19
 656:	4f 93       	push	r20
 658:	5f 93       	push	r21
 65a:	6f 93       	push	r22
 65c:	7f 93       	push	r23
 65e:	8f 93       	push	r24
 660:	9f 93       	push	r25
 662:	af 93       	push	r26
 664:	bf 93       	push	r27
 666:	ef 93       	push	r30
 668:	ff 93       	push	r31
	REC2 = UDR1;
 66a:	80 91 ce 00 	lds	r24, 0x00CE
 66e:	80 93 d9 02 	sts	0x02D9, r24
	if(start_transmission == 1)
 672:	80 91 0c 02 	lds	r24, 0x020C
 676:	90 91 0d 02 	lds	r25, 0x020D
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	21 f4       	brne	.+8      	; 0x686 <__vector_28+0x3e>
		sendDataSingle(REC2);
 67e:	80 91 d9 02 	lds	r24, 0x02D9
 682:	0e 94 5d 02 	call	0x4ba	; 0x4ba <sendDataSingle>
		} else if (REC2 == '\r')	{
		} else {
		msgInt2++;
	}
	**/
}
 686:	ff 91       	pop	r31
 688:	ef 91       	pop	r30
 68a:	bf 91       	pop	r27
 68c:	af 91       	pop	r26
 68e:	9f 91       	pop	r25
 690:	8f 91       	pop	r24
 692:	7f 91       	pop	r23
 694:	6f 91       	pop	r22
 696:	5f 91       	pop	r21
 698:	4f 91       	pop	r20
 69a:	3f 91       	pop	r19
 69c:	2f 91       	pop	r18
 69e:	0f 90       	pop	r0
 6a0:	0f be       	out	0x3f, r0	; 63
 6a2:	0f 90       	pop	r0
 6a4:	1f 90       	pop	r1
 6a6:	18 95       	reti

000006a8 <main>:


int main(void)
{
	DDRD |= (1 << LED_GREEN);
 6a8:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << LED_YELLOW);
 6aa:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << LED_RED);
 6ac:	57 9a       	sbi	0x0a, 7	; 10
	
	PORTD &= ~(1 << LED_GREEN);
 6ae:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~(1 << LED_YELLOW);
 6b0:	5e 98       	cbi	0x0b, 6	; 11
	PORTD &= ~(1 << LED_RED);
 6b2:	5f 98       	cbi	0x0b, 7	; 11
	
	uart_init();
 6b4:	0e 94 5d 00 	call	0xba	; 0xba <uart_init>
	uart_init2();
 6b8:	0e 94 76 00 	call	0xec	; 0xec <uart_init2>
	
	wifiDirect_connection();
 6bc:	0e 94 b6 00 	call	0x16c	; 0x16c <wifiDirect_connection>
	grp_request();
 6c0:	0e 94 00 01 	call	0x200	; 0x200 <grp_request>
	tcp_connection();
 6c4:	0e 94 92 01 	call	0x324	; 0x324 <tcp_connection>
	
    while(1)
    {
		PORTD ^= (1 << LED_GREEN);
 6c8:	90 e2       	ldi	r25, 0x20	; 32
 6ca:	8b b1       	in	r24, 0x0b	; 11
 6cc:	89 27       	eor	r24, r25
 6ce:	8b b9       	out	0x0b, r24	; 11
 6d0:	fc cf       	rjmp	.-8      	; 0x6ca <main+0x22>

000006d2 <strcmp>:
 6d2:	fb 01       	movw	r30, r22
 6d4:	dc 01       	movw	r26, r24
 6d6:	8d 91       	ld	r24, X+
 6d8:	01 90       	ld	r0, Z+
 6da:	80 19       	sub	r24, r0
 6dc:	01 10       	cpse	r0, r1
 6de:	d9 f3       	breq	.-10     	; 0x6d6 <strcmp+0x4>
 6e0:	99 0b       	sbc	r25, r25
 6e2:	08 95       	ret

000006e4 <strncpy>:
 6e4:	fb 01       	movw	r30, r22
 6e6:	dc 01       	movw	r26, r24
 6e8:	41 50       	subi	r20, 0x01	; 1
 6ea:	50 40       	sbci	r21, 0x00	; 0
 6ec:	48 f0       	brcs	.+18     	; 0x700 <strncpy+0x1c>
 6ee:	01 90       	ld	r0, Z+
 6f0:	0d 92       	st	X+, r0
 6f2:	00 20       	and	r0, r0
 6f4:	c9 f7       	brne	.-14     	; 0x6e8 <strncpy+0x4>
 6f6:	01 c0       	rjmp	.+2      	; 0x6fa <strncpy+0x16>
 6f8:	1d 92       	st	X+, r1
 6fa:	41 50       	subi	r20, 0x01	; 1
 6fc:	50 40       	sbci	r21, 0x00	; 0
 6fe:	e0 f7       	brcc	.-8      	; 0x6f8 <strncpy+0x14>
 700:	08 95       	ret

00000702 <sprintf>:
 702:	ae e0       	ldi	r26, 0x0E	; 14
 704:	b0 e0       	ldi	r27, 0x00	; 0
 706:	e7 e8       	ldi	r30, 0x87	; 135
 708:	f3 e0       	ldi	r31, 0x03	; 3
 70a:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__prologue_saves__+0x1c>
 70e:	0d 89       	ldd	r16, Y+21	; 0x15
 710:	1e 89       	ldd	r17, Y+22	; 0x16
 712:	86 e0       	ldi	r24, 0x06	; 6
 714:	8c 83       	std	Y+4, r24	; 0x04
 716:	1a 83       	std	Y+2, r17	; 0x02
 718:	09 83       	std	Y+1, r16	; 0x01
 71a:	8f ef       	ldi	r24, 0xFF	; 255
 71c:	9f e7       	ldi	r25, 0x7F	; 127
 71e:	9e 83       	std	Y+6, r25	; 0x06
 720:	8d 83       	std	Y+5, r24	; 0x05
 722:	ae 01       	movw	r20, r28
 724:	47 5e       	subi	r20, 0xE7	; 231
 726:	5f 4f       	sbci	r21, 0xFF	; 255
 728:	6f 89       	ldd	r22, Y+23	; 0x17
 72a:	78 8d       	ldd	r23, Y+24	; 0x18
 72c:	ce 01       	movw	r24, r28
 72e:	01 96       	adiw	r24, 0x01	; 1
 730:	0e 94 a3 03 	call	0x746	; 0x746 <vfprintf>
 734:	ef 81       	ldd	r30, Y+7	; 0x07
 736:	f8 85       	ldd	r31, Y+8	; 0x08
 738:	e0 0f       	add	r30, r16
 73a:	f1 1f       	adc	r31, r17
 73c:	10 82       	st	Z, r1
 73e:	2e 96       	adiw	r28, 0x0e	; 14
 740:	e4 e0       	ldi	r30, 0x04	; 4
 742:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <__epilogue_restores__+0x1c>

00000746 <vfprintf>:
 746:	ac e0       	ldi	r26, 0x0C	; 12
 748:	b0 e0       	ldi	r27, 0x00	; 0
 74a:	e9 ea       	ldi	r30, 0xA9	; 169
 74c:	f3 e0       	ldi	r31, 0x03	; 3
 74e:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__prologue_saves__>
 752:	7c 01       	movw	r14, r24
 754:	6b 01       	movw	r12, r22
 756:	8a 01       	movw	r16, r20
 758:	fc 01       	movw	r30, r24
 75a:	17 82       	std	Z+7, r1	; 0x07
 75c:	16 82       	std	Z+6, r1	; 0x06
 75e:	83 81       	ldd	r24, Z+3	; 0x03
 760:	81 ff       	sbrs	r24, 1
 762:	bd c1       	rjmp	.+890    	; 0xade <vfprintf+0x398>
 764:	ce 01       	movw	r24, r28
 766:	01 96       	adiw	r24, 0x01	; 1
 768:	4c 01       	movw	r8, r24
 76a:	f7 01       	movw	r30, r14
 76c:	93 81       	ldd	r25, Z+3	; 0x03
 76e:	f6 01       	movw	r30, r12
 770:	93 fd       	sbrc	r25, 3
 772:	85 91       	lpm	r24, Z+
 774:	93 ff       	sbrs	r25, 3
 776:	81 91       	ld	r24, Z+
 778:	6f 01       	movw	r12, r30
 77a:	88 23       	and	r24, r24
 77c:	09 f4       	brne	.+2      	; 0x780 <vfprintf+0x3a>
 77e:	ab c1       	rjmp	.+854    	; 0xad6 <vfprintf+0x390>
 780:	85 32       	cpi	r24, 0x25	; 37
 782:	39 f4       	brne	.+14     	; 0x792 <vfprintf+0x4c>
 784:	93 fd       	sbrc	r25, 3
 786:	85 91       	lpm	r24, Z+
 788:	93 ff       	sbrs	r25, 3
 78a:	81 91       	ld	r24, Z+
 78c:	6f 01       	movw	r12, r30
 78e:	85 32       	cpi	r24, 0x25	; 37
 790:	29 f4       	brne	.+10     	; 0x79c <vfprintf+0x56>
 792:	b7 01       	movw	r22, r14
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 79a:	e7 cf       	rjmp	.-50     	; 0x76a <vfprintf+0x24>
 79c:	51 2c       	mov	r5, r1
 79e:	31 2c       	mov	r3, r1
 7a0:	20 e0       	ldi	r18, 0x00	; 0
 7a2:	20 32       	cpi	r18, 0x20	; 32
 7a4:	a0 f4       	brcc	.+40     	; 0x7ce <vfprintf+0x88>
 7a6:	8b 32       	cpi	r24, 0x2B	; 43
 7a8:	69 f0       	breq	.+26     	; 0x7c4 <vfprintf+0x7e>
 7aa:	30 f4       	brcc	.+12     	; 0x7b8 <vfprintf+0x72>
 7ac:	80 32       	cpi	r24, 0x20	; 32
 7ae:	59 f0       	breq	.+22     	; 0x7c6 <vfprintf+0x80>
 7b0:	83 32       	cpi	r24, 0x23	; 35
 7b2:	69 f4       	brne	.+26     	; 0x7ce <vfprintf+0x88>
 7b4:	20 61       	ori	r18, 0x10	; 16
 7b6:	2c c0       	rjmp	.+88     	; 0x810 <vfprintf+0xca>
 7b8:	8d 32       	cpi	r24, 0x2D	; 45
 7ba:	39 f0       	breq	.+14     	; 0x7ca <vfprintf+0x84>
 7bc:	80 33       	cpi	r24, 0x30	; 48
 7be:	39 f4       	brne	.+14     	; 0x7ce <vfprintf+0x88>
 7c0:	21 60       	ori	r18, 0x01	; 1
 7c2:	26 c0       	rjmp	.+76     	; 0x810 <vfprintf+0xca>
 7c4:	22 60       	ori	r18, 0x02	; 2
 7c6:	24 60       	ori	r18, 0x04	; 4
 7c8:	23 c0       	rjmp	.+70     	; 0x810 <vfprintf+0xca>
 7ca:	28 60       	ori	r18, 0x08	; 8
 7cc:	21 c0       	rjmp	.+66     	; 0x810 <vfprintf+0xca>
 7ce:	27 fd       	sbrc	r18, 7
 7d0:	27 c0       	rjmp	.+78     	; 0x820 <vfprintf+0xda>
 7d2:	30 ed       	ldi	r19, 0xD0	; 208
 7d4:	38 0f       	add	r19, r24
 7d6:	3a 30       	cpi	r19, 0x0A	; 10
 7d8:	78 f4       	brcc	.+30     	; 0x7f8 <vfprintf+0xb2>
 7da:	26 ff       	sbrs	r18, 6
 7dc:	06 c0       	rjmp	.+12     	; 0x7ea <vfprintf+0xa4>
 7de:	fa e0       	ldi	r31, 0x0A	; 10
 7e0:	5f 9e       	mul	r5, r31
 7e2:	30 0d       	add	r19, r0
 7e4:	11 24       	eor	r1, r1
 7e6:	53 2e       	mov	r5, r19
 7e8:	13 c0       	rjmp	.+38     	; 0x810 <vfprintf+0xca>
 7ea:	8a e0       	ldi	r24, 0x0A	; 10
 7ec:	38 9e       	mul	r3, r24
 7ee:	30 0d       	add	r19, r0
 7f0:	11 24       	eor	r1, r1
 7f2:	33 2e       	mov	r3, r19
 7f4:	20 62       	ori	r18, 0x20	; 32
 7f6:	0c c0       	rjmp	.+24     	; 0x810 <vfprintf+0xca>
 7f8:	8e 32       	cpi	r24, 0x2E	; 46
 7fa:	21 f4       	brne	.+8      	; 0x804 <vfprintf+0xbe>
 7fc:	26 fd       	sbrc	r18, 6
 7fe:	6b c1       	rjmp	.+726    	; 0xad6 <vfprintf+0x390>
 800:	20 64       	ori	r18, 0x40	; 64
 802:	06 c0       	rjmp	.+12     	; 0x810 <vfprintf+0xca>
 804:	8c 36       	cpi	r24, 0x6C	; 108
 806:	11 f4       	brne	.+4      	; 0x80c <vfprintf+0xc6>
 808:	20 68       	ori	r18, 0x80	; 128
 80a:	02 c0       	rjmp	.+4      	; 0x810 <vfprintf+0xca>
 80c:	88 36       	cpi	r24, 0x68	; 104
 80e:	41 f4       	brne	.+16     	; 0x820 <vfprintf+0xda>
 810:	f6 01       	movw	r30, r12
 812:	93 fd       	sbrc	r25, 3
 814:	85 91       	lpm	r24, Z+
 816:	93 ff       	sbrs	r25, 3
 818:	81 91       	ld	r24, Z+
 81a:	6f 01       	movw	r12, r30
 81c:	81 11       	cpse	r24, r1
 81e:	c1 cf       	rjmp	.-126    	; 0x7a2 <vfprintf+0x5c>
 820:	98 2f       	mov	r25, r24
 822:	9f 7d       	andi	r25, 0xDF	; 223
 824:	95 54       	subi	r25, 0x45	; 69
 826:	93 30       	cpi	r25, 0x03	; 3
 828:	28 f4       	brcc	.+10     	; 0x834 <vfprintf+0xee>
 82a:	0c 5f       	subi	r16, 0xFC	; 252
 82c:	1f 4f       	sbci	r17, 0xFF	; 255
 82e:	ff e3       	ldi	r31, 0x3F	; 63
 830:	f9 83       	std	Y+1, r31	; 0x01
 832:	0d c0       	rjmp	.+26     	; 0x84e <vfprintf+0x108>
 834:	83 36       	cpi	r24, 0x63	; 99
 836:	31 f0       	breq	.+12     	; 0x844 <vfprintf+0xfe>
 838:	83 37       	cpi	r24, 0x73	; 115
 83a:	71 f0       	breq	.+28     	; 0x858 <vfprintf+0x112>
 83c:	83 35       	cpi	r24, 0x53	; 83
 83e:	09 f0       	breq	.+2      	; 0x842 <vfprintf+0xfc>
 840:	5b c0       	rjmp	.+182    	; 0x8f8 <vfprintf+0x1b2>
 842:	22 c0       	rjmp	.+68     	; 0x888 <vfprintf+0x142>
 844:	f8 01       	movw	r30, r16
 846:	80 81       	ld	r24, Z
 848:	89 83       	std	Y+1, r24	; 0x01
 84a:	0e 5f       	subi	r16, 0xFE	; 254
 84c:	1f 4f       	sbci	r17, 0xFF	; 255
 84e:	44 24       	eor	r4, r4
 850:	43 94       	inc	r4
 852:	51 2c       	mov	r5, r1
 854:	54 01       	movw	r10, r8
 856:	15 c0       	rjmp	.+42     	; 0x882 <vfprintf+0x13c>
 858:	38 01       	movw	r6, r16
 85a:	f2 e0       	ldi	r31, 0x02	; 2
 85c:	6f 0e       	add	r6, r31
 85e:	71 1c       	adc	r7, r1
 860:	f8 01       	movw	r30, r16
 862:	a0 80       	ld	r10, Z
 864:	b1 80       	ldd	r11, Z+1	; 0x01
 866:	26 ff       	sbrs	r18, 6
 868:	03 c0       	rjmp	.+6      	; 0x870 <vfprintf+0x12a>
 86a:	65 2d       	mov	r22, r5
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	02 c0       	rjmp	.+4      	; 0x874 <vfprintf+0x12e>
 870:	6f ef       	ldi	r22, 0xFF	; 255
 872:	7f ef       	ldi	r23, 0xFF	; 255
 874:	c5 01       	movw	r24, r10
 876:	2c 87       	std	Y+12, r18	; 0x0c
 878:	0e 94 80 05 	call	0xb00	; 0xb00 <strnlen>
 87c:	2c 01       	movw	r4, r24
 87e:	83 01       	movw	r16, r6
 880:	2c 85       	ldd	r18, Y+12	; 0x0c
 882:	2f 77       	andi	r18, 0x7F	; 127
 884:	22 2e       	mov	r2, r18
 886:	17 c0       	rjmp	.+46     	; 0x8b6 <vfprintf+0x170>
 888:	38 01       	movw	r6, r16
 88a:	f2 e0       	ldi	r31, 0x02	; 2
 88c:	6f 0e       	add	r6, r31
 88e:	71 1c       	adc	r7, r1
 890:	f8 01       	movw	r30, r16
 892:	a0 80       	ld	r10, Z
 894:	b1 80       	ldd	r11, Z+1	; 0x01
 896:	26 ff       	sbrs	r18, 6
 898:	03 c0       	rjmp	.+6      	; 0x8a0 <vfprintf+0x15a>
 89a:	65 2d       	mov	r22, r5
 89c:	70 e0       	ldi	r23, 0x00	; 0
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <vfprintf+0x15e>
 8a0:	6f ef       	ldi	r22, 0xFF	; 255
 8a2:	7f ef       	ldi	r23, 0xFF	; 255
 8a4:	c5 01       	movw	r24, r10
 8a6:	2c 87       	std	Y+12, r18	; 0x0c
 8a8:	0e 94 75 05 	call	0xaea	; 0xaea <strnlen_P>
 8ac:	2c 01       	movw	r4, r24
 8ae:	2c 85       	ldd	r18, Y+12	; 0x0c
 8b0:	20 68       	ori	r18, 0x80	; 128
 8b2:	22 2e       	mov	r2, r18
 8b4:	83 01       	movw	r16, r6
 8b6:	23 fc       	sbrc	r2, 3
 8b8:	1b c0       	rjmp	.+54     	; 0x8f0 <vfprintf+0x1aa>
 8ba:	83 2d       	mov	r24, r3
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	48 16       	cp	r4, r24
 8c0:	59 06       	cpc	r5, r25
 8c2:	b0 f4       	brcc	.+44     	; 0x8f0 <vfprintf+0x1aa>
 8c4:	b7 01       	movw	r22, r14
 8c6:	80 e2       	ldi	r24, 0x20	; 32
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 8ce:	3a 94       	dec	r3
 8d0:	f4 cf       	rjmp	.-24     	; 0x8ba <vfprintf+0x174>
 8d2:	f5 01       	movw	r30, r10
 8d4:	27 fc       	sbrc	r2, 7
 8d6:	85 91       	lpm	r24, Z+
 8d8:	27 fe       	sbrs	r2, 7
 8da:	81 91       	ld	r24, Z+
 8dc:	5f 01       	movw	r10, r30
 8de:	b7 01       	movw	r22, r14
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 8e6:	31 10       	cpse	r3, r1
 8e8:	3a 94       	dec	r3
 8ea:	f1 e0       	ldi	r31, 0x01	; 1
 8ec:	4f 1a       	sub	r4, r31
 8ee:	51 08       	sbc	r5, r1
 8f0:	41 14       	cp	r4, r1
 8f2:	51 04       	cpc	r5, r1
 8f4:	71 f7       	brne	.-36     	; 0x8d2 <vfprintf+0x18c>
 8f6:	e5 c0       	rjmp	.+458    	; 0xac2 <vfprintf+0x37c>
 8f8:	84 36       	cpi	r24, 0x64	; 100
 8fa:	11 f0       	breq	.+4      	; 0x900 <vfprintf+0x1ba>
 8fc:	89 36       	cpi	r24, 0x69	; 105
 8fe:	39 f5       	brne	.+78     	; 0x94e <vfprintf+0x208>
 900:	f8 01       	movw	r30, r16
 902:	27 ff       	sbrs	r18, 7
 904:	07 c0       	rjmp	.+14     	; 0x914 <vfprintf+0x1ce>
 906:	60 81       	ld	r22, Z
 908:	71 81       	ldd	r23, Z+1	; 0x01
 90a:	82 81       	ldd	r24, Z+2	; 0x02
 90c:	93 81       	ldd	r25, Z+3	; 0x03
 90e:	0c 5f       	subi	r16, 0xFC	; 252
 910:	1f 4f       	sbci	r17, 0xFF	; 255
 912:	08 c0       	rjmp	.+16     	; 0x924 <vfprintf+0x1de>
 914:	60 81       	ld	r22, Z
 916:	71 81       	ldd	r23, Z+1	; 0x01
 918:	88 27       	eor	r24, r24
 91a:	77 fd       	sbrc	r23, 7
 91c:	80 95       	com	r24
 91e:	98 2f       	mov	r25, r24
 920:	0e 5f       	subi	r16, 0xFE	; 254
 922:	1f 4f       	sbci	r17, 0xFF	; 255
 924:	2f 76       	andi	r18, 0x6F	; 111
 926:	b2 2e       	mov	r11, r18
 928:	97 ff       	sbrs	r25, 7
 92a:	09 c0       	rjmp	.+18     	; 0x93e <vfprintf+0x1f8>
 92c:	90 95       	com	r25
 92e:	80 95       	com	r24
 930:	70 95       	com	r23
 932:	61 95       	neg	r22
 934:	7f 4f       	sbci	r23, 0xFF	; 255
 936:	8f 4f       	sbci	r24, 0xFF	; 255
 938:	9f 4f       	sbci	r25, 0xFF	; 255
 93a:	20 68       	ori	r18, 0x80	; 128
 93c:	b2 2e       	mov	r11, r18
 93e:	2a e0       	ldi	r18, 0x0A	; 10
 940:	30 e0       	ldi	r19, 0x00	; 0
 942:	a4 01       	movw	r20, r8
 944:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__ultoa_invert>
 948:	a8 2e       	mov	r10, r24
 94a:	a8 18       	sub	r10, r8
 94c:	44 c0       	rjmp	.+136    	; 0x9d6 <vfprintf+0x290>
 94e:	85 37       	cpi	r24, 0x75	; 117
 950:	29 f4       	brne	.+10     	; 0x95c <vfprintf+0x216>
 952:	2f 7e       	andi	r18, 0xEF	; 239
 954:	b2 2e       	mov	r11, r18
 956:	2a e0       	ldi	r18, 0x0A	; 10
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	25 c0       	rjmp	.+74     	; 0x9a6 <vfprintf+0x260>
 95c:	f2 2f       	mov	r31, r18
 95e:	f9 7f       	andi	r31, 0xF9	; 249
 960:	bf 2e       	mov	r11, r31
 962:	8f 36       	cpi	r24, 0x6F	; 111
 964:	c1 f0       	breq	.+48     	; 0x996 <vfprintf+0x250>
 966:	18 f4       	brcc	.+6      	; 0x96e <vfprintf+0x228>
 968:	88 35       	cpi	r24, 0x58	; 88
 96a:	79 f0       	breq	.+30     	; 0x98a <vfprintf+0x244>
 96c:	b4 c0       	rjmp	.+360    	; 0xad6 <vfprintf+0x390>
 96e:	80 37       	cpi	r24, 0x70	; 112
 970:	19 f0       	breq	.+6      	; 0x978 <vfprintf+0x232>
 972:	88 37       	cpi	r24, 0x78	; 120
 974:	21 f0       	breq	.+8      	; 0x97e <vfprintf+0x238>
 976:	af c0       	rjmp	.+350    	; 0xad6 <vfprintf+0x390>
 978:	2f 2f       	mov	r18, r31
 97a:	20 61       	ori	r18, 0x10	; 16
 97c:	b2 2e       	mov	r11, r18
 97e:	b4 fe       	sbrs	r11, 4
 980:	0d c0       	rjmp	.+26     	; 0x99c <vfprintf+0x256>
 982:	8b 2d       	mov	r24, r11
 984:	84 60       	ori	r24, 0x04	; 4
 986:	b8 2e       	mov	r11, r24
 988:	09 c0       	rjmp	.+18     	; 0x99c <vfprintf+0x256>
 98a:	24 ff       	sbrs	r18, 4
 98c:	0a c0       	rjmp	.+20     	; 0x9a2 <vfprintf+0x25c>
 98e:	9f 2f       	mov	r25, r31
 990:	96 60       	ori	r25, 0x06	; 6
 992:	b9 2e       	mov	r11, r25
 994:	06 c0       	rjmp	.+12     	; 0x9a2 <vfprintf+0x25c>
 996:	28 e0       	ldi	r18, 0x08	; 8
 998:	30 e0       	ldi	r19, 0x00	; 0
 99a:	05 c0       	rjmp	.+10     	; 0x9a6 <vfprintf+0x260>
 99c:	20 e1       	ldi	r18, 0x10	; 16
 99e:	30 e0       	ldi	r19, 0x00	; 0
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <vfprintf+0x260>
 9a2:	20 e1       	ldi	r18, 0x10	; 16
 9a4:	32 e0       	ldi	r19, 0x02	; 2
 9a6:	f8 01       	movw	r30, r16
 9a8:	b7 fe       	sbrs	r11, 7
 9aa:	07 c0       	rjmp	.+14     	; 0x9ba <vfprintf+0x274>
 9ac:	60 81       	ld	r22, Z
 9ae:	71 81       	ldd	r23, Z+1	; 0x01
 9b0:	82 81       	ldd	r24, Z+2	; 0x02
 9b2:	93 81       	ldd	r25, Z+3	; 0x03
 9b4:	0c 5f       	subi	r16, 0xFC	; 252
 9b6:	1f 4f       	sbci	r17, 0xFF	; 255
 9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <vfprintf+0x280>
 9ba:	60 81       	ld	r22, Z
 9bc:	71 81       	ldd	r23, Z+1	; 0x01
 9be:	80 e0       	ldi	r24, 0x00	; 0
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	0e 5f       	subi	r16, 0xFE	; 254
 9c4:	1f 4f       	sbci	r17, 0xFF	; 255
 9c6:	a4 01       	movw	r20, r8
 9c8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__ultoa_invert>
 9cc:	a8 2e       	mov	r10, r24
 9ce:	a8 18       	sub	r10, r8
 9d0:	fb 2d       	mov	r31, r11
 9d2:	ff 77       	andi	r31, 0x7F	; 127
 9d4:	bf 2e       	mov	r11, r31
 9d6:	b6 fe       	sbrs	r11, 6
 9d8:	0b c0       	rjmp	.+22     	; 0x9f0 <vfprintf+0x2aa>
 9da:	2b 2d       	mov	r18, r11
 9dc:	2e 7f       	andi	r18, 0xFE	; 254
 9de:	a5 14       	cp	r10, r5
 9e0:	50 f4       	brcc	.+20     	; 0x9f6 <vfprintf+0x2b0>
 9e2:	b4 fe       	sbrs	r11, 4
 9e4:	0a c0       	rjmp	.+20     	; 0x9fa <vfprintf+0x2b4>
 9e6:	b2 fc       	sbrc	r11, 2
 9e8:	08 c0       	rjmp	.+16     	; 0x9fa <vfprintf+0x2b4>
 9ea:	2b 2d       	mov	r18, r11
 9ec:	2e 7e       	andi	r18, 0xEE	; 238
 9ee:	05 c0       	rjmp	.+10     	; 0x9fa <vfprintf+0x2b4>
 9f0:	7a 2c       	mov	r7, r10
 9f2:	2b 2d       	mov	r18, r11
 9f4:	03 c0       	rjmp	.+6      	; 0x9fc <vfprintf+0x2b6>
 9f6:	7a 2c       	mov	r7, r10
 9f8:	01 c0       	rjmp	.+2      	; 0x9fc <vfprintf+0x2b6>
 9fa:	75 2c       	mov	r7, r5
 9fc:	24 ff       	sbrs	r18, 4
 9fe:	0d c0       	rjmp	.+26     	; 0xa1a <vfprintf+0x2d4>
 a00:	fe 01       	movw	r30, r28
 a02:	ea 0d       	add	r30, r10
 a04:	f1 1d       	adc	r31, r1
 a06:	80 81       	ld	r24, Z
 a08:	80 33       	cpi	r24, 0x30	; 48
 a0a:	11 f4       	brne	.+4      	; 0xa10 <vfprintf+0x2ca>
 a0c:	29 7e       	andi	r18, 0xE9	; 233
 a0e:	09 c0       	rjmp	.+18     	; 0xa22 <vfprintf+0x2dc>
 a10:	22 ff       	sbrs	r18, 2
 a12:	06 c0       	rjmp	.+12     	; 0xa20 <vfprintf+0x2da>
 a14:	73 94       	inc	r7
 a16:	73 94       	inc	r7
 a18:	04 c0       	rjmp	.+8      	; 0xa22 <vfprintf+0x2dc>
 a1a:	82 2f       	mov	r24, r18
 a1c:	86 78       	andi	r24, 0x86	; 134
 a1e:	09 f0       	breq	.+2      	; 0xa22 <vfprintf+0x2dc>
 a20:	73 94       	inc	r7
 a22:	23 fd       	sbrc	r18, 3
 a24:	13 c0       	rjmp	.+38     	; 0xa4c <vfprintf+0x306>
 a26:	20 ff       	sbrs	r18, 0
 a28:	06 c0       	rjmp	.+12     	; 0xa36 <vfprintf+0x2f0>
 a2a:	5a 2c       	mov	r5, r10
 a2c:	73 14       	cp	r7, r3
 a2e:	18 f4       	brcc	.+6      	; 0xa36 <vfprintf+0x2f0>
 a30:	53 0c       	add	r5, r3
 a32:	57 18       	sub	r5, r7
 a34:	73 2c       	mov	r7, r3
 a36:	73 14       	cp	r7, r3
 a38:	68 f4       	brcc	.+26     	; 0xa54 <vfprintf+0x30e>
 a3a:	b7 01       	movw	r22, r14
 a3c:	80 e2       	ldi	r24, 0x20	; 32
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	2c 87       	std	Y+12, r18	; 0x0c
 a42:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 a46:	73 94       	inc	r7
 a48:	2c 85       	ldd	r18, Y+12	; 0x0c
 a4a:	f5 cf       	rjmp	.-22     	; 0xa36 <vfprintf+0x2f0>
 a4c:	73 14       	cp	r7, r3
 a4e:	10 f4       	brcc	.+4      	; 0xa54 <vfprintf+0x30e>
 a50:	37 18       	sub	r3, r7
 a52:	01 c0       	rjmp	.+2      	; 0xa56 <vfprintf+0x310>
 a54:	31 2c       	mov	r3, r1
 a56:	24 ff       	sbrs	r18, 4
 a58:	12 c0       	rjmp	.+36     	; 0xa7e <vfprintf+0x338>
 a5a:	b7 01       	movw	r22, r14
 a5c:	80 e3       	ldi	r24, 0x30	; 48
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	2c 87       	std	Y+12, r18	; 0x0c
 a62:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 a66:	2c 85       	ldd	r18, Y+12	; 0x0c
 a68:	22 ff       	sbrs	r18, 2
 a6a:	17 c0       	rjmp	.+46     	; 0xa9a <vfprintf+0x354>
 a6c:	21 ff       	sbrs	r18, 1
 a6e:	03 c0       	rjmp	.+6      	; 0xa76 <vfprintf+0x330>
 a70:	88 e5       	ldi	r24, 0x58	; 88
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <vfprintf+0x334>
 a76:	88 e7       	ldi	r24, 0x78	; 120
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	b7 01       	movw	r22, r14
 a7c:	0c c0       	rjmp	.+24     	; 0xa96 <vfprintf+0x350>
 a7e:	82 2f       	mov	r24, r18
 a80:	86 78       	andi	r24, 0x86	; 134
 a82:	59 f0       	breq	.+22     	; 0xa9a <vfprintf+0x354>
 a84:	21 fd       	sbrc	r18, 1
 a86:	02 c0       	rjmp	.+4      	; 0xa8c <vfprintf+0x346>
 a88:	80 e2       	ldi	r24, 0x20	; 32
 a8a:	01 c0       	rjmp	.+2      	; 0xa8e <vfprintf+0x348>
 a8c:	8b e2       	ldi	r24, 0x2B	; 43
 a8e:	27 fd       	sbrc	r18, 7
 a90:	8d e2       	ldi	r24, 0x2D	; 45
 a92:	b7 01       	movw	r22, r14
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 a9a:	a5 14       	cp	r10, r5
 a9c:	38 f4       	brcc	.+14     	; 0xaac <vfprintf+0x366>
 a9e:	b7 01       	movw	r22, r14
 aa0:	80 e3       	ldi	r24, 0x30	; 48
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 aa8:	5a 94       	dec	r5
 aaa:	f7 cf       	rjmp	.-18     	; 0xa9a <vfprintf+0x354>
 aac:	aa 94       	dec	r10
 aae:	f4 01       	movw	r30, r8
 ab0:	ea 0d       	add	r30, r10
 ab2:	f1 1d       	adc	r31, r1
 ab4:	80 81       	ld	r24, Z
 ab6:	b7 01       	movw	r22, r14
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 abe:	a1 10       	cpse	r10, r1
 ac0:	f5 cf       	rjmp	.-22     	; 0xaac <vfprintf+0x366>
 ac2:	33 20       	and	r3, r3
 ac4:	09 f4       	brne	.+2      	; 0xac8 <vfprintf+0x382>
 ac6:	51 ce       	rjmp	.-862    	; 0x76a <vfprintf+0x24>
 ac8:	b7 01       	movw	r22, r14
 aca:	80 e2       	ldi	r24, 0x20	; 32
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	0e 94 8b 05 	call	0xb16	; 0xb16 <fputc>
 ad2:	3a 94       	dec	r3
 ad4:	f6 cf       	rjmp	.-20     	; 0xac2 <vfprintf+0x37c>
 ad6:	f7 01       	movw	r30, r14
 ad8:	86 81       	ldd	r24, Z+6	; 0x06
 ada:	97 81       	ldd	r25, Z+7	; 0x07
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <vfprintf+0x39c>
 ade:	8f ef       	ldi	r24, 0xFF	; 255
 ae0:	9f ef       	ldi	r25, 0xFF	; 255
 ae2:	2c 96       	adiw	r28, 0x0c	; 12
 ae4:	e2 e1       	ldi	r30, 0x12	; 18
 ae6:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__epilogue_restores__>

00000aea <strnlen_P>:
 aea:	fc 01       	movw	r30, r24
 aec:	05 90       	lpm	r0, Z+
 aee:	61 50       	subi	r22, 0x01	; 1
 af0:	70 40       	sbci	r23, 0x00	; 0
 af2:	01 10       	cpse	r0, r1
 af4:	d8 f7       	brcc	.-10     	; 0xaec <strnlen_P+0x2>
 af6:	80 95       	com	r24
 af8:	90 95       	com	r25
 afa:	8e 0f       	add	r24, r30
 afc:	9f 1f       	adc	r25, r31
 afe:	08 95       	ret

00000b00 <strnlen>:
 b00:	fc 01       	movw	r30, r24
 b02:	61 50       	subi	r22, 0x01	; 1
 b04:	70 40       	sbci	r23, 0x00	; 0
 b06:	01 90       	ld	r0, Z+
 b08:	01 10       	cpse	r0, r1
 b0a:	d8 f7       	brcc	.-10     	; 0xb02 <strnlen+0x2>
 b0c:	80 95       	com	r24
 b0e:	90 95       	com	r25
 b10:	8e 0f       	add	r24, r30
 b12:	9f 1f       	adc	r25, r31
 b14:	08 95       	ret

00000b16 <fputc>:
 b16:	0f 93       	push	r16
 b18:	1f 93       	push	r17
 b1a:	cf 93       	push	r28
 b1c:	df 93       	push	r29
 b1e:	18 2f       	mov	r17, r24
 b20:	09 2f       	mov	r16, r25
 b22:	eb 01       	movw	r28, r22
 b24:	8b 81       	ldd	r24, Y+3	; 0x03
 b26:	81 fd       	sbrc	r24, 1
 b28:	03 c0       	rjmp	.+6      	; 0xb30 <fputc+0x1a>
 b2a:	8f ef       	ldi	r24, 0xFF	; 255
 b2c:	9f ef       	ldi	r25, 0xFF	; 255
 b2e:	20 c0       	rjmp	.+64     	; 0xb70 <fputc+0x5a>
 b30:	82 ff       	sbrs	r24, 2
 b32:	10 c0       	rjmp	.+32     	; 0xb54 <fputc+0x3e>
 b34:	4e 81       	ldd	r20, Y+6	; 0x06
 b36:	5f 81       	ldd	r21, Y+7	; 0x07
 b38:	2c 81       	ldd	r18, Y+4	; 0x04
 b3a:	3d 81       	ldd	r19, Y+5	; 0x05
 b3c:	42 17       	cp	r20, r18
 b3e:	53 07       	cpc	r21, r19
 b40:	7c f4       	brge	.+30     	; 0xb60 <fputc+0x4a>
 b42:	e8 81       	ld	r30, Y
 b44:	f9 81       	ldd	r31, Y+1	; 0x01
 b46:	9f 01       	movw	r18, r30
 b48:	2f 5f       	subi	r18, 0xFF	; 255
 b4a:	3f 4f       	sbci	r19, 0xFF	; 255
 b4c:	39 83       	std	Y+1, r19	; 0x01
 b4e:	28 83       	st	Y, r18
 b50:	10 83       	st	Z, r17
 b52:	06 c0       	rjmp	.+12     	; 0xb60 <fputc+0x4a>
 b54:	e8 85       	ldd	r30, Y+8	; 0x08
 b56:	f9 85       	ldd	r31, Y+9	; 0x09
 b58:	81 2f       	mov	r24, r17
 b5a:	09 95       	icall
 b5c:	89 2b       	or	r24, r25
 b5e:	29 f7       	brne	.-54     	; 0xb2a <fputc+0x14>
 b60:	2e 81       	ldd	r18, Y+6	; 0x06
 b62:	3f 81       	ldd	r19, Y+7	; 0x07
 b64:	2f 5f       	subi	r18, 0xFF	; 255
 b66:	3f 4f       	sbci	r19, 0xFF	; 255
 b68:	3f 83       	std	Y+7, r19	; 0x07
 b6a:	2e 83       	std	Y+6, r18	; 0x06
 b6c:	81 2f       	mov	r24, r17
 b6e:	90 2f       	mov	r25, r16
 b70:	df 91       	pop	r29
 b72:	cf 91       	pop	r28
 b74:	1f 91       	pop	r17
 b76:	0f 91       	pop	r16
 b78:	08 95       	ret

00000b7a <__ultoa_invert>:
 b7a:	fa 01       	movw	r30, r20
 b7c:	aa 27       	eor	r26, r26
 b7e:	28 30       	cpi	r18, 0x08	; 8
 b80:	51 f1       	breq	.+84     	; 0xbd6 <__ultoa_invert+0x5c>
 b82:	20 31       	cpi	r18, 0x10	; 16
 b84:	81 f1       	breq	.+96     	; 0xbe6 <__ultoa_invert+0x6c>
 b86:	e8 94       	clt
 b88:	6f 93       	push	r22
 b8a:	6e 7f       	andi	r22, 0xFE	; 254
 b8c:	6e 5f       	subi	r22, 0xFE	; 254
 b8e:	7f 4f       	sbci	r23, 0xFF	; 255
 b90:	8f 4f       	sbci	r24, 0xFF	; 255
 b92:	9f 4f       	sbci	r25, 0xFF	; 255
 b94:	af 4f       	sbci	r26, 0xFF	; 255
 b96:	b1 e0       	ldi	r27, 0x01	; 1
 b98:	3e d0       	rcall	.+124    	; 0xc16 <__ultoa_invert+0x9c>
 b9a:	b4 e0       	ldi	r27, 0x04	; 4
 b9c:	3c d0       	rcall	.+120    	; 0xc16 <__ultoa_invert+0x9c>
 b9e:	67 0f       	add	r22, r23
 ba0:	78 1f       	adc	r23, r24
 ba2:	89 1f       	adc	r24, r25
 ba4:	9a 1f       	adc	r25, r26
 ba6:	a1 1d       	adc	r26, r1
 ba8:	68 0f       	add	r22, r24
 baa:	79 1f       	adc	r23, r25
 bac:	8a 1f       	adc	r24, r26
 bae:	91 1d       	adc	r25, r1
 bb0:	a1 1d       	adc	r26, r1
 bb2:	6a 0f       	add	r22, r26
 bb4:	71 1d       	adc	r23, r1
 bb6:	81 1d       	adc	r24, r1
 bb8:	91 1d       	adc	r25, r1
 bba:	a1 1d       	adc	r26, r1
 bbc:	20 d0       	rcall	.+64     	; 0xbfe <__ultoa_invert+0x84>
 bbe:	09 f4       	brne	.+2      	; 0xbc2 <__ultoa_invert+0x48>
 bc0:	68 94       	set
 bc2:	3f 91       	pop	r19
 bc4:	2a e0       	ldi	r18, 0x0A	; 10
 bc6:	26 9f       	mul	r18, r22
 bc8:	11 24       	eor	r1, r1
 bca:	30 19       	sub	r19, r0
 bcc:	30 5d       	subi	r19, 0xD0	; 208
 bce:	31 93       	st	Z+, r19
 bd0:	de f6       	brtc	.-74     	; 0xb88 <__ultoa_invert+0xe>
 bd2:	cf 01       	movw	r24, r30
 bd4:	08 95       	ret
 bd6:	46 2f       	mov	r20, r22
 bd8:	47 70       	andi	r20, 0x07	; 7
 bda:	40 5d       	subi	r20, 0xD0	; 208
 bdc:	41 93       	st	Z+, r20
 bde:	b3 e0       	ldi	r27, 0x03	; 3
 be0:	0f d0       	rcall	.+30     	; 0xc00 <__ultoa_invert+0x86>
 be2:	c9 f7       	brne	.-14     	; 0xbd6 <__ultoa_invert+0x5c>
 be4:	f6 cf       	rjmp	.-20     	; 0xbd2 <__ultoa_invert+0x58>
 be6:	46 2f       	mov	r20, r22
 be8:	4f 70       	andi	r20, 0x0F	; 15
 bea:	40 5d       	subi	r20, 0xD0	; 208
 bec:	4a 33       	cpi	r20, 0x3A	; 58
 bee:	18 f0       	brcs	.+6      	; 0xbf6 <__ultoa_invert+0x7c>
 bf0:	49 5d       	subi	r20, 0xD9	; 217
 bf2:	31 fd       	sbrc	r19, 1
 bf4:	40 52       	subi	r20, 0x20	; 32
 bf6:	41 93       	st	Z+, r20
 bf8:	02 d0       	rcall	.+4      	; 0xbfe <__ultoa_invert+0x84>
 bfa:	a9 f7       	brne	.-22     	; 0xbe6 <__ultoa_invert+0x6c>
 bfc:	ea cf       	rjmp	.-44     	; 0xbd2 <__ultoa_invert+0x58>
 bfe:	b4 e0       	ldi	r27, 0x04	; 4
 c00:	a6 95       	lsr	r26
 c02:	97 95       	ror	r25
 c04:	87 95       	ror	r24
 c06:	77 95       	ror	r23
 c08:	67 95       	ror	r22
 c0a:	ba 95       	dec	r27
 c0c:	c9 f7       	brne	.-14     	; 0xc00 <__ultoa_invert+0x86>
 c0e:	00 97       	sbiw	r24, 0x00	; 0
 c10:	61 05       	cpc	r22, r1
 c12:	71 05       	cpc	r23, r1
 c14:	08 95       	ret
 c16:	9b 01       	movw	r18, r22
 c18:	ac 01       	movw	r20, r24
 c1a:	0a 2e       	mov	r0, r26
 c1c:	06 94       	lsr	r0
 c1e:	57 95       	ror	r21
 c20:	47 95       	ror	r20
 c22:	37 95       	ror	r19
 c24:	27 95       	ror	r18
 c26:	ba 95       	dec	r27
 c28:	c9 f7       	brne	.-14     	; 0xc1c <__ultoa_invert+0xa2>
 c2a:	62 0f       	add	r22, r18
 c2c:	73 1f       	adc	r23, r19
 c2e:	84 1f       	adc	r24, r20
 c30:	95 1f       	adc	r25, r21
 c32:	a0 1d       	adc	r26, r0
 c34:	08 95       	ret

00000c36 <__prologue_saves__>:
 c36:	2f 92       	push	r2
 c38:	3f 92       	push	r3
 c3a:	4f 92       	push	r4
 c3c:	5f 92       	push	r5
 c3e:	6f 92       	push	r6
 c40:	7f 92       	push	r7
 c42:	8f 92       	push	r8
 c44:	9f 92       	push	r9
 c46:	af 92       	push	r10
 c48:	bf 92       	push	r11
 c4a:	cf 92       	push	r12
 c4c:	df 92       	push	r13
 c4e:	ef 92       	push	r14
 c50:	ff 92       	push	r15
 c52:	0f 93       	push	r16
 c54:	1f 93       	push	r17
 c56:	cf 93       	push	r28
 c58:	df 93       	push	r29
 c5a:	cd b7       	in	r28, 0x3d	; 61
 c5c:	de b7       	in	r29, 0x3e	; 62
 c5e:	ca 1b       	sub	r28, r26
 c60:	db 0b       	sbc	r29, r27
 c62:	0f b6       	in	r0, 0x3f	; 63
 c64:	f8 94       	cli
 c66:	de bf       	out	0x3e, r29	; 62
 c68:	0f be       	out	0x3f, r0	; 63
 c6a:	cd bf       	out	0x3d, r28	; 61
 c6c:	09 94       	ijmp

00000c6e <__epilogue_restores__>:
 c6e:	2a 88       	ldd	r2, Y+18	; 0x12
 c70:	39 88       	ldd	r3, Y+17	; 0x11
 c72:	48 88       	ldd	r4, Y+16	; 0x10
 c74:	5f 84       	ldd	r5, Y+15	; 0x0f
 c76:	6e 84       	ldd	r6, Y+14	; 0x0e
 c78:	7d 84       	ldd	r7, Y+13	; 0x0d
 c7a:	8c 84       	ldd	r8, Y+12	; 0x0c
 c7c:	9b 84       	ldd	r9, Y+11	; 0x0b
 c7e:	aa 84       	ldd	r10, Y+10	; 0x0a
 c80:	b9 84       	ldd	r11, Y+9	; 0x09
 c82:	c8 84       	ldd	r12, Y+8	; 0x08
 c84:	df 80       	ldd	r13, Y+7	; 0x07
 c86:	ee 80       	ldd	r14, Y+6	; 0x06
 c88:	fd 80       	ldd	r15, Y+5	; 0x05
 c8a:	0c 81       	ldd	r16, Y+4	; 0x04
 c8c:	1b 81       	ldd	r17, Y+3	; 0x03
 c8e:	aa 81       	ldd	r26, Y+2	; 0x02
 c90:	b9 81       	ldd	r27, Y+1	; 0x01
 c92:	ce 0f       	add	r28, r30
 c94:	d1 1d       	adc	r29, r1
 c96:	0f b6       	in	r0, 0x3f	; 63
 c98:	f8 94       	cli
 c9a:	de bf       	out	0x3e, r29	; 62
 c9c:	0f be       	out	0x3f, r0	; 63
 c9e:	cd bf       	out	0x3d, r28	; 61
 ca0:	ed 01       	movw	r28, r26
 ca2:	08 95       	ret

00000ca4 <_exit>:
 ca4:	f8 94       	cli

00000ca6 <__stop_program>:
 ca6:	ff cf       	rjmp	.-2      	; 0xca6 <__stop_program>
