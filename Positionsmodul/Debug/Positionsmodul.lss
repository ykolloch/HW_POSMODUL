
Positionsmodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  00000400  00000494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000400  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000079  00800194  00800194  00000528  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066a  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000227  00000000  00000000  00000c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000314  00000000  00000000  00000e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000178  00000000  00000000  00001178  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000281  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002dc  00000000  00000000  00001571  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000184d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_20>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 e0       	ldi	r30, 0x00	; 0
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 39       	cpi	r26, 0x94	; 148
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	a4 e9       	ldi	r26, 0x94	; 148
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ad 30       	cpi	r26, 0x0D	; 13
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 cc 01 	call	0x398	; 0x398 <main>
  b2:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <uart_init>:
volatile char REC;
volatile char recMsg[100];
volatile int msgInt = 0;

void uart_init(void) {
	UBRR0H = (BAUDRATE >> 8);
  ba:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUDRATE;
  be:	81 e8       	ldi	r24, 0x81	; 129
  c0:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);
  c4:	e1 ec       	ldi	r30, 0xC1	; 193
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	88 61       	ori	r24, 0x18	; 24
  cc:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | ( 1<< UCSZ00);
  ce:	a2 ec       	ldi	r26, 0xC2	; 194
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	8c 91       	ld	r24, X
  d4:	86 60       	ori	r24, 0x06	; 6
  d6:	8c 93       	st	X, r24
	
	UCSR0B |= (1 << RXCIE0);
  d8:	80 81       	ld	r24, Z
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	80 83       	st	Z, r24
	UCSR0A |= (1 << RXC0);
  de:	e0 ec       	ldi	r30, 0xC0	; 192
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	
	sei();
  e8:	78 94       	sei
  ea:	08 95       	ret

000000ec <uart_init2>:
}

void uart_init2(void) {
	UBRR1H = (BAUDRATE >> 8);
  ec:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = BAUDRATE;
  f0:	81 e8       	ldi	r24, 0x81	; 129
  f2:	80 93 cc 00 	sts	0x00CC, r24
	
	UCSR1B |= (1 << TXEN1) | (1 << RXEN1);
  f6:	e9 ec       	ldi	r30, 0xC9	; 201
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 61       	ori	r24, 0x18	; 24
  fe:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | ( 1<< UCSZ10);
 100:	ea ec       	ldi	r30, 0xCA	; 202
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	86 60       	ori	r24, 0x06	; 6
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret

0000010c <uart_transmit>:
	
}

void uart_transmit(char c) {
	while(!(UCSR0A & (1 << UDRE0)));
 10c:	e0 ec       	ldi	r30, 0xC0	; 192
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	90 81       	ld	r25, Z
 112:	95 ff       	sbrs	r25, 5
 114:	fd cf       	rjmp	.-6      	; 0x110 <uart_transmit+0x4>
	UDR0 = c;
 116:	80 93 c6 00 	sts	0x00C6, r24
 11a:	08 95       	ret

0000011c <uart_transmit2>:
	while(!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

void uart_transmit2(char c) {
	while(!(UCSR1A & (1 << UDRE1)));
 11c:	e8 ec       	ldi	r30, 0xC8	; 200
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	90 81       	ld	r25, Z
 122:	95 ff       	sbrs	r25, 5
 124:	fd cf       	rjmp	.-6      	; 0x120 <uart_transmit2+0x4>
	UDR1 = c;
 126:	80 93 ce 00 	sts	0x00CE, r24
 12a:	08 95       	ret

0000012c <uart_sendString>:
char uart_read2() {
	while(!(UCSR1A & (1 << RXC1)));
	return UDR1;
}

void uart_sendString(char temp[]) {
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	8c 01       	movw	r16, r24
 13a:	7c 01       	movw	r14, r24
	for(int i=0; i < strlen(temp); i++) {
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	d0 e0       	ldi	r29, 0x00	; 0
 140:	06 c0       	rjmp	.+12     	; 0x14e <uart_sendString+0x22>
		uart_transmit(temp[i]);
 142:	f7 01       	movw	r30, r14
 144:	81 91       	ld	r24, Z+
 146:	7f 01       	movw	r14, r30
 148:	0e 94 86 00 	call	0x10c	; 0x10c <uart_transmit>
	while(!(UCSR1A & (1 << RXC1)));
	return UDR1;
}

void uart_sendString(char temp[]) {
	for(int i=0; i < strlen(temp); i++) {
 14c:	21 96       	adiw	r28, 0x01	; 1
 14e:	f8 01       	movw	r30, r16
 150:	01 90       	ld	r0, Z+
 152:	00 20       	and	r0, r0
 154:	e9 f7       	brne	.-6      	; 0x150 <uart_sendString+0x24>
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	e0 1b       	sub	r30, r16
 15a:	f1 0b       	sbc	r31, r17
 15c:	ce 17       	cp	r28, r30
 15e:	df 07       	cpc	r29, r31
 160:	80 f3       	brcs	.-32     	; 0x142 <uart_sendString+0x16>
		uart_transmit(temp[i]);
	}
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	ff 90       	pop	r15
 16c:	ef 90       	pop	r14
 16e:	08 95       	ret

00000170 <uart_sendString2>:

void uart_sendString2(char temp[]) {
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	8c 01       	movw	r16, r24
 17e:	7c 01       	movw	r14, r24
	for(int i=0; i < strlen(temp); i++) {
 180:	c0 e0       	ldi	r28, 0x00	; 0
 182:	d0 e0       	ldi	r29, 0x00	; 0
 184:	06 c0       	rjmp	.+12     	; 0x192 <uart_sendString2+0x22>
		uart_transmit2(temp[i]);
 186:	f7 01       	movw	r30, r14
 188:	81 91       	ld	r24, Z+
 18a:	7f 01       	movw	r14, r30
 18c:	0e 94 8e 00 	call	0x11c	; 0x11c <uart_transmit2>
		uart_transmit(temp[i]);
	}
}

void uart_sendString2(char temp[]) {
	for(int i=0; i < strlen(temp); i++) {
 190:	21 96       	adiw	r28, 0x01	; 1
 192:	f8 01       	movw	r30, r16
 194:	01 90       	ld	r0, Z+
 196:	00 20       	and	r0, r0
 198:	e9 f7       	brne	.-6      	; 0x194 <uart_sendString2+0x24>
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	e0 1b       	sub	r30, r16
 19e:	f1 0b       	sbc	r31, r17
 1a0:	ce 17       	cp	r28, r30
 1a2:	df 07       	cpc	r29, r31
 1a4:	80 f3       	brcs	.-32     	; 0x186 <uart_sendString2+0x16>
		uart_transmit2(temp[i]);
	}
}
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	08 95       	ret

000001b4 <wifiDirect_connection>:

void wifiDirect_connection() {
	PORTD ^= (1 << LED_YELLOW);
 1b4:	9b b1       	in	r25, 0x0b	; 11
 1b6:	80 e4       	ldi	r24, 0x40	; 64
 1b8:	89 27       	eor	r24, r25
 1ba:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	88 e0       	ldi	r24, 0x08	; 8
 1c0:	9d e3       	ldi	r25, 0x3D	; 61
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <wifiDirect_connection+0xe>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <wifiDirect_connection+0x18>
 1cc:	00 00       	nop
	_delay_ms(1000);
	uart_sendString(atCom1);
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 96 00 	call	0x12c	; 0x12c <uart_sendString>
 1d6:	2f e7       	ldi	r18, 0x7F	; 127
 1d8:	84 e8       	ldi	r24, 0x84	; 132
 1da:	9e e1       	ldi	r25, 0x1E	; 30
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <wifiDirect_connection+0x28>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <wifiDirect_connection+0x32>
 1e6:	00 00       	nop
	_delay_ms(500);
	uart_sendString(atCom2);
 1e8:	8e e5       	ldi	r24, 0x5E	; 94
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 96 00 	call	0x12c	; 0x12c <uart_sendString>
 1f0:	2f e7       	ldi	r18, 0x7F	; 127
 1f2:	84 e8       	ldi	r24, 0x84	; 132
 1f4:	9e e1       	ldi	r25, 0x1E	; 30
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <wifiDirect_connection+0x42>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <wifiDirect_connection+0x4c>
 200:	00 00       	nop
	_delay_ms(500);
	uart_sendString(atCom3);
 202:	85 e1       	ldi	r24, 0x15	; 21
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 96 00 	call	0x12c	; 0x12c <uart_sendString>
 20a:	2f e7       	ldi	r18, 0x7F	; 127
 20c:	84 e8       	ldi	r24, 0x84	; 132
 20e:	9e e1       	ldi	r25, 0x1E	; 30
 210:	21 50       	subi	r18, 0x01	; 1
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <wifiDirect_connection+0x5c>
 218:	00 c0       	rjmp	.+0      	; 0x21a <wifiDirect_connection+0x66>
 21a:	00 00       	nop
	_delay_ms(500);
	uart_sendString(atCom4);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	0e 94 96 00 	call	0x12c	; 0x12c <uart_sendString>
	PORTD ^= (1 << LED_YELLOW);
 224:	9b b1       	in	r25, 0x0b	; 11
 226:	80 e4       	ldi	r24, 0x40	; 64
 228:	89 27       	eor	r24, r25
 22a:	8b b9       	out	0x0b, r24	; 11
 22c:	08 95       	ret

0000022e <get_macAddress>:
}

void get_macAddress(char temp[]) {
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	64 97       	sbiw	r28, 0x14	; 20
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	8c 01       	movw	r16, r24
	char subString[10];
	char p2p_found[10] = {"p2p-dev"};
 248:	88 e0       	ldi	r24, 0x08	; 8
 24a:	ea e8       	ldi	r30, 0x8A	; 138
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	de 01       	movw	r26, r28
 250:	1b 96       	adiw	r26, 0x0b	; 11
 252:	01 90       	ld	r0, Z+
 254:	0d 92       	st	X+, r0
 256:	8a 95       	dec	r24
 258:	e1 f7       	brne	.-8      	; 0x252 <get_macAddress+0x24>
 25a:	1c 8a       	std	Y+20, r1	; 0x14
 25c:	1b 8a       	std	Y+19, r1	; 0x13
	strncpy(subString, &temp[0], 7);
 25e:	47 e0       	ldi	r20, 0x07	; 7
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	b8 01       	movw	r22, r16
 264:	ce 01       	movw	r24, r28
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	0e 94 ef 01 	call	0x3de	; 0x3de <strncpy>
	subString[8] = '\n';
 26c:	8a e0       	ldi	r24, 0x0A	; 10
 26e:	89 87       	std	Y+9, r24	; 0x09
	subString[9] = '\0';
 270:	1a 86       	std	Y+10, r1	; 0x0a
	//uart_sendString2(subString);
	if(strcmp(p2p_found, subString) == 0) {
 272:	be 01       	movw	r22, r28
 274:	6f 5f       	subi	r22, 0xFF	; 255
 276:	7f 4f       	sbci	r23, 0xFF	; 255
 278:	ce 01       	movw	r24, r28
 27a:	0b 96       	adiw	r24, 0x0b	; 11
 27c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <strcmp>
 280:	89 2b       	or	r24, r25
 282:	81 f4       	brne	.+32     	; 0x2a4 <get_macAddress+0x76>
		PORTD ^= (1 << LED_RED);
 284:	8b b1       	in	r24, 0x0b	; 11
 286:	80 58       	subi	r24, 0x80	; 128
 288:	8b b9       	out	0x0b, r24	; 11
		strncpy(&macAddress, &temp[13], sizeof(&macAddress));
 28a:	b8 01       	movw	r22, r16
 28c:	63 5f       	subi	r22, 0xF3	; 243
 28e:	7f 4f       	sbci	r23, 0xFF	; 255
 290:	42 e0       	ldi	r20, 0x02	; 2
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	8b ef       	ldi	r24, 0xFB	; 251
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	0e 94 ef 01 	call	0x3de	; 0x3de <strncpy>
		uart_sendString2(macAddress);
 29c:	8b ef       	ldi	r24, 0xFB	; 251
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 b8 00 	call	0x170	; 0x170 <uart_sendString2>
	}
}
 2a4:	64 96       	adiw	r28, 0x14	; 20
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	08 95       	ret

000002ba <__vector_20>:

ISR(USART0_RX_vect) {
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	2f 93       	push	r18
 2c6:	3f 93       	push	r19
 2c8:	4f 93       	push	r20
 2ca:	5f 93       	push	r21
 2cc:	6f 93       	push	r22
 2ce:	7f 93       	push	r23
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
 2d4:	af 93       	push	r26
 2d6:	bf 93       	push	r27
 2d8:	ef 93       	push	r30
 2da:	ff 93       	push	r31
	REC = UDR0;
 2dc:	80 91 c6 00 	lds	r24, 0x00C6
 2e0:	80 93 96 01 	sts	0x0196, r24
	recMsg[msgInt] = REC;
 2e4:	e0 91 94 01 	lds	r30, 0x0194
 2e8:	f0 91 95 01 	lds	r31, 0x0195
 2ec:	80 91 96 01 	lds	r24, 0x0196
 2f0:	e9 56       	subi	r30, 0x69	; 105
 2f2:	fe 4f       	sbci	r31, 0xFE	; 254
 2f4:	80 83       	st	Z, r24
	if(REC == '\n') {
 2f6:	80 91 96 01 	lds	r24, 0x0196
 2fa:	8a 30       	cpi	r24, 0x0A	; 10
 2fc:	79 f5       	brne	.+94     	; 0x35c <__vector_20+0xa2>
		recMsg[msgInt++] = '\n';
 2fe:	80 91 94 01 	lds	r24, 0x0194
 302:	90 91 95 01 	lds	r25, 0x0195
 306:	9c 01       	movw	r18, r24
 308:	2f 5f       	subi	r18, 0xFF	; 255
 30a:	3f 4f       	sbci	r19, 0xFF	; 255
 30c:	30 93 95 01 	sts	0x0195, r19
 310:	20 93 94 01 	sts	0x0194, r18
 314:	fc 01       	movw	r30, r24
 316:	e9 56       	subi	r30, 0x69	; 105
 318:	fe 4f       	sbci	r31, 0xFE	; 254
 31a:	2a e0       	ldi	r18, 0x0A	; 10
 31c:	20 83       	st	Z, r18
		recMsg[msgInt++] = '\0';
 31e:	80 91 94 01 	lds	r24, 0x0194
 322:	90 91 95 01 	lds	r25, 0x0195
 326:	9c 01       	movw	r18, r24
 328:	2f 5f       	subi	r18, 0xFF	; 255
 32a:	3f 4f       	sbci	r19, 0xFF	; 255
 32c:	30 93 95 01 	sts	0x0195, r19
 330:	20 93 94 01 	sts	0x0194, r18
 334:	fc 01       	movw	r30, r24
 336:	e9 56       	subi	r30, 0x69	; 105
 338:	fe 4f       	sbci	r31, 0xFE	; 254
 33a:	10 82       	st	Z, r1
		msgInt = 0;
 33c:	10 92 95 01 	sts	0x0195, r1
 340:	10 92 94 01 	sts	0x0194, r1
		get_macAddress(recMsg);
 344:	87 e9       	ldi	r24, 0x97	; 151
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 17 01 	call	0x22e	; 0x22e <get_macAddress>
		//uart_sendString2(recMsg);
		memset(&recMsg[0], 0, sizeof(recMsg));
 34c:	84 e6       	ldi	r24, 0x64	; 100
 34e:	e7 e9       	ldi	r30, 0x97	; 151
 350:	f1 e0       	ldi	r31, 0x01	; 1
 352:	df 01       	movw	r26, r30
 354:	1d 92       	st	X+, r1
 356:	8a 95       	dec	r24
 358:	e9 f7       	brne	.-6      	; 0x354 <__vector_20+0x9a>
 35a:	0d c0       	rjmp	.+26     	; 0x376 <__vector_20+0xbc>
	} else if (REC == '\r')	{
 35c:	80 91 96 01 	lds	r24, 0x0196
 360:	8d 30       	cpi	r24, 0x0D	; 13
 362:	49 f0       	breq	.+18     	; 0x376 <__vector_20+0xbc>
	} else {
		msgInt++;
 364:	80 91 94 01 	lds	r24, 0x0194
 368:	90 91 95 01 	lds	r25, 0x0195
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	90 93 95 01 	sts	0x0195, r25
 372:	80 93 94 01 	sts	0x0194, r24
	}
}
 376:	ff 91       	pop	r31
 378:	ef 91       	pop	r30
 37a:	bf 91       	pop	r27
 37c:	af 91       	pop	r26
 37e:	9f 91       	pop	r25
 380:	8f 91       	pop	r24
 382:	7f 91       	pop	r23
 384:	6f 91       	pop	r22
 386:	5f 91       	pop	r21
 388:	4f 91       	pop	r20
 38a:	3f 91       	pop	r19
 38c:	2f 91       	pop	r18
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <main>:

int main(void)
{
	DDRD |= (1 << LED_GREEN);
 398:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << LED_YELLOW);
 39a:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << LED_RED);
 39c:	57 9a       	sbi	0x0a, 7	; 10
	
	PORTD &= ~(1 << LED_GREEN);
 39e:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~(1 << LED_YELLOW);
 3a0:	5e 98       	cbi	0x0b, 6	; 11
	PORTD &= ~(1 << LED_RED);
 3a2:	5f 98       	cbi	0x0b, 7	; 11
	
	uart_init();
 3a4:	0e 94 5d 00 	call	0xba	; 0xba <uart_init>
	uart_init2();
 3a8:	0e 94 76 00 	call	0xec	; 0xec <uart_init2>
	
	wifiDirect_connection();
 3ac:	0e 94 da 00 	call	0x1b4	; 0x1b4 <wifiDirect_connection>
	
    while(1)
    {
		PORTD ^= (1 << LED_GREEN);
 3b0:	90 e2       	ldi	r25, 0x20	; 32
 3b2:	8b b1       	in	r24, 0x0b	; 11
 3b4:	89 27       	eor	r24, r25
 3b6:	8b b9       	out	0x0b, r24	; 11
 3b8:	2f e7       	ldi	r18, 0x7F	; 127
 3ba:	34 e8       	ldi	r19, 0x84	; 132
 3bc:	8e e1       	ldi	r24, 0x1E	; 30
 3be:	21 50       	subi	r18, 0x01	; 1
 3c0:	30 40       	sbci	r19, 0x00	; 0
 3c2:	80 40       	sbci	r24, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <main+0x26>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <main+0x30>
 3c8:	00 00       	nop
 3ca:	f3 cf       	rjmp	.-26     	; 0x3b2 <main+0x1a>

000003cc <strcmp>:
 3cc:	fb 01       	movw	r30, r22
 3ce:	dc 01       	movw	r26, r24
 3d0:	8d 91       	ld	r24, X+
 3d2:	01 90       	ld	r0, Z+
 3d4:	80 19       	sub	r24, r0
 3d6:	01 10       	cpse	r0, r1
 3d8:	d9 f3       	breq	.-10     	; 0x3d0 <strcmp+0x4>
 3da:	99 0b       	sbc	r25, r25
 3dc:	08 95       	ret

000003de <strncpy>:
 3de:	fb 01       	movw	r30, r22
 3e0:	dc 01       	movw	r26, r24
 3e2:	41 50       	subi	r20, 0x01	; 1
 3e4:	50 40       	sbci	r21, 0x00	; 0
 3e6:	48 f0       	brcs	.+18     	; 0x3fa <strncpy+0x1c>
 3e8:	01 90       	ld	r0, Z+
 3ea:	0d 92       	st	X+, r0
 3ec:	00 20       	and	r0, r0
 3ee:	c9 f7       	brne	.-14     	; 0x3e2 <strncpy+0x4>
 3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <strncpy+0x16>
 3f2:	1d 92       	st	X+, r1
 3f4:	41 50       	subi	r20, 0x01	; 1
 3f6:	50 40       	sbci	r21, 0x00	; 0
 3f8:	e0 f7       	brcc	.-8      	; 0x3f2 <strncpy+0x14>
 3fa:	08 95       	ret

000003fc <_exit>:
 3fc:	f8 94       	cli

000003fe <__stop_program>:
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <__stop_program>
